"use strict";(self.webpackChunkdocs_nestjs_com=self.webpackChunkdocs_nestjs_com||[]).push([[656],{1656:(x,m,r)=>{r.r(m),r.d(m,{SecurityModule:()=>b});var T=r(6814),h=r(8833),q=r(6208),i=r(2437),e=r(4946),g=r(328),u=r(6663),f=r(9556),Z=r(8327);const y=[{path:"authentication",component:(()=>{class t extends i.y{static \u0275fac=function(){let n;return function(s){return(n||(n=e.n5z(t)))(s||t)}}();static \u0275cmp=e.Xpm({type:t,selectors:[["app-authentication"]],features:[e.qOj],decls:515,vars:68,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/authentication.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","authentication"],["rel","nofollow","target","_blank","href","https://tools.ietf.org/html/rfc6750"],["appAnchor","","id","creating-an-authentication-module"],[1,"language-bash"],[1,"filename"],["app154514caf76d01c88f2b6ef696aa14b3892ac824",""],[1,"language-typescript"],["app12ed68a633193a899f39b510f8b1b54a831f6312",""],["appAnchor","","id","implementing-the-sign-in-endpoint"],["app79fb44765dec59f7f5a549754ce3d54cff67b52e",""],[1,"Warning"],["rel","nofollow","target","_blank","href","https://github.com/kelektiv/node.bcrypt.js#readme"],["app2a22d14cf708f3de2eea573b9b8a05060056667b",""],["app85c7b8e3df3b68e2113524cf371d26ec2dd60547",""],[1,"info"],["routerLink","/techniques/validation"],["appAnchor","","id","jwt-token"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/jwt"],["appbaf7990e75e4143514bf95a0857866b5837edacb",""],["app520164774b10ced67b4425e57d3970acd9be19cb",""],["appbdce23a6158dcc5e14e11bf8f62a8443dd476964",""],["rel","nofollow","target","_blank","href","https://github.com/nestjs/jwt/blob/master/README.md"],["rel","nofollow","target","_blank","href","https://github.com/auth0/node-jsonwebtoken#usage"],["appAnchor","","id","implementing-the-authentication-guard"],["app443bbec0108b873725b5f9e48e4542845b418299",""],["appaf45c4eb68a74d636088ef3edb313032277054c2",""],["appAnchor","","id","enable-authentication-globally"],["href","/guards#binding-guards"],["href","/guards#putting-it-all-together"],["appAnchor","","id","passport-integration"],["rel","nofollow","target","_blank","href","https://github.com/jaredhanson/passport"],["routerLink","/recipes/passport"],["appAnchor","","id","example"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/nest/tree/master/sample/19-auth-jwt"]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Authentication"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Authentication is an "),e.TgZ(9,"strong"),e._uU(10,"essential"),e.qZA(),e._uU(11," part of most applications. There are many different approaches and strategies to handle authentication. The approach taken for any project depends on its particular application requirements. This chapter presents several approaches to authentication that can be adapted to a variety of different requirements."),e.qZA(),e.TgZ(12,"p"),e._uU(13,"Let's flesh out our requirements. For this use case, clients will start by authenticating with a username and password. Once authenticated, the server will issue a JWT that can be sent as a "),e.TgZ(14,"a",6),e._uU(15,"bearer token"),e.qZA(),e._uU(16," in an authorization header on subsequent requests to prove authentication. We'll also create a protected route that is accessible only to requests that contain a valid JWT."),e.qZA(),e.TgZ(17,"p"),e._uU(18,"We'll start with the first requirement: authenticating a user. We'll then extend that by issuing a JWT. Finally, we'll create a protected route that checks for a valid JWT on the request."),e.qZA(),e.TgZ(19,"h4",7)(20,"span"),e._uU(21,"Creating an authentication module"),e.qZA()(),e.TgZ(22,"p"),e._uU(23,"We'll start by generating an "),e.TgZ(24,"code"),e._uU(25,"AuthModule"),e.qZA(),e._uU(26," and in it, an "),e.TgZ(27,"code"),e._uU(28,"AuthService"),e.qZA(),e._uU(29," and an "),e.TgZ(30,"code"),e._uU(31,"AuthController"),e.qZA(),e._uU(32,". We'll use the "),e.TgZ(33,"code"),e._uU(34,"AuthService"),e.qZA(),e._uU(35," to implement the authentication logic, and the "),e.TgZ(36,"code"),e._uU(37,"AuthController"),e.qZA(),e._uU(38," to expose the authentication endpoints."),e.qZA(),e.TgZ(39,"pre")(40,"code",8),e._uU(41,"\n$ nest g module auth\n$ nest g controller auth\n$ nest g service auth\n"),e.qZA()(),e.TgZ(42,"p"),e._uU(43,"As we implement the "),e.TgZ(44,"code"),e._uU(45,"AuthService"),e.qZA(),e._uU(46,", we'll find it useful to encapsulate user operations in a "),e.TgZ(47,"code"),e._uU(48,"UsersService"),e.qZA(),e._uU(49,", so let's generate that module and service now:"),e.qZA(),e.TgZ(50,"pre")(51,"code",8),e._uU(52,"\n$ nest g module users\n$ nest g service users\n"),e.qZA()(),e.TgZ(53,"p"),e._uU(54,"Replace the default contents of these generated files as shown below. For our sample app, the "),e.TgZ(55,"code"),e._uU(56,"UsersService"),e.qZA(),e._uU(57," simply maintains a hard-coded in-memory list of users, and a find method to retrieve one by username. In a real app, this is where you'd build your user model and persistence layer, using your library of choice (e.g., TypeORM, Sequelize, Mongoose, etc.)."),e.qZA(),e.TgZ(58,"span",9),e._uU(59),e.ALo(60,"extension"),e._UZ(61,"app-tabs",null,10),e.qZA(),e.TgZ(63,"pre")(64,"code",11),e._uU(65,"\nimport { Injectable } from '@nestjs/common';\n\n// This should be a real class/interface representing a user entity\nexport type User = any;\n\n@Injectable()\nexport class UsersService {\n  private readonly users = [\n    {\n      userId: 1,\n      username: 'john',\n      password: 'changeme',\n    },\n    {\n      userId: 2,\n      username: 'maria',\n      password: 'guess',\n    },\n  ];\n\n  async findOne(username: string): Promise<User | undefined> {\n    return this.users.find(user => user.username === username);\n  }\n}\n"),e.qZA()(),e.TgZ(66,"pre")(67,"code",11),e._uU(68,"\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService {\n  constructor() {\n    this.users = [\n      {\n        userId: 1,\n        username: 'john',\n        password: 'changeme',\n      },\n      {\n        userId: 2,\n        username: 'maria',\n        password: 'guess',\n      },\n    ];\n  }\n\n  async findOne(username) {\n    return this.users.find(user => user.username === username);\n  }\n}\n"),e.qZA()(),e.TgZ(69,"p"),e._uU(70,"In the "),e.TgZ(71,"code"),e._uU(72,"UsersModule"),e.qZA(),e._uU(73,", the only change needed is to add the "),e.TgZ(74,"code"),e._uU(75,"UsersService"),e.qZA(),e._uU(76," to the exports array of the "),e.TgZ(77,"code"),e._uU(78,"@Module"),e.qZA(),e._uU(79," decorator so that it is visible outside this module (we'll soon use it in our "),e.TgZ(80,"code"),e._uU(81,"AuthService"),e.qZA(),e._uU(82,")."),e.qZA(),e.TgZ(83,"span",9),e._uU(84),e.ALo(85,"extension"),e._UZ(86,"app-tabs",null,12),e.qZA(),e.TgZ(88,"pre")(89,"code",11),e._uU(90,"\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(91,"pre")(92,"code",11),e._uU(93,"\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Module({\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"),e.qZA()(),e.TgZ(94,"h4",13)(95,"span"),e._uU(96,'Implementing the "Sign in" endpoint'),e.qZA()(),e.TgZ(97,"p"),e._uU(98,"Our "),e.TgZ(99,"code"),e._uU(100,"AuthService"),e.qZA(),e._uU(101," has the job of retrieving a user and verifying the password. We create a "),e.TgZ(102,"code"),e._uU(103,"signIn()"),e.qZA(),e._uU(104," method for this purpose. In the code below, we use a convenient ES6 spread operator to strip the password property from the user object before returning it. This is a common practice when returning user objects, as you don't want to expose sensitive fields like passwords or other security keys."),e.qZA(),e.TgZ(105,"span",9),e._uU(106),e.ALo(107,"extension"),e._UZ(108,"app-tabs",null,14),e.qZA(),e.TgZ(110,"pre")(111,"code",11),e._uU(112,"\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async signIn(username: string, pass: string): Promise<any> {\n    const user = await this.usersService.findOne(username);\n    if (user?.password !== pass) {\n      throw new UnauthorizedException();\n    }\n    const { password, ...result } = user;\n    // TODO: Generate a JWT and return it here\n    // instead of the user object\n    return result;\n  }\n}\n"),e.qZA()(),e.TgZ(113,"pre")(114,"code",11),e._uU(115,"\nimport { Injectable, Dependencies, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\n@Dependencies(UsersService)\nexport class AuthService {\n  constructor(usersService) {\n    this.usersService = usersService;\n  }\n\n  async signIn(username: string, pass: string) {\n    const user = await this.usersService.findOne(username);\n    if (user?.password !== pass) {\n      throw new UnauthorizedException();\n    }\n    const { password, ...result } = user;\n    // TODO: Generate a JWT and return it here\n    // instead of the user object\n    return result;\n  }\n}\n"),e.qZA()(),e.TgZ(116,"blockquote",15)(117,"strong"),e._uU(118,"Warning"),e.qZA(),e._uU(119," Of course in a real application, you wouldn't store a password in plain text. You'd instead use a library like "),e.TgZ(120,"a",16),e._uU(121,"bcrypt"),e.qZA(),e._uU(122,", with a salted one-way hash algorithm. With that approach, you'd only store hashed passwords, and then compare the stored password to a hashed version of the "),e.TgZ(123,"strong"),e._uU(124,"incoming"),e.qZA(),e._uU(125," password, thus never storing or exposing user passwords in plain text. To keep our sample app simple, we violate that absolute mandate and use plain text. "),e.TgZ(126,"strong"),e._uU(127,"Don't do this in your real app!"),e.qZA()(),e.TgZ(128,"p"),e._uU(129,"Now, we update our "),e.TgZ(130,"code"),e._uU(131,"AuthModule"),e.qZA(),e._uU(132," to import the "),e.TgZ(133,"code"),e._uU(134,"UsersModule"),e.qZA(),e._uU(135,"."),e.qZA(),e.TgZ(136,"span",9),e._uU(137),e.ALo(138,"extension"),e._UZ(139,"app-tabs",null,17),e.qZA(),e.TgZ(141,"pre")(142,"code",11),e._uU(143,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n"),e.qZA()(),e.TgZ(144,"pre")(145,"code",11),e._uU(146,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  providers: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n"),e.qZA()(),e.TgZ(147,"p"),e._uU(148,"With this in place, let's open up the "),e.TgZ(149,"code"),e._uU(150,"AuthController"),e.qZA(),e._uU(151," and add a "),e.TgZ(152,"code"),e._uU(153,"signIn()"),e.qZA(),e._uU(154," method to it. This method will be called by the client to authenticate a user. It will receive the username and password in the request body, and will return a JWT token if the user is authenticated."),e.qZA(),e.TgZ(155,"span",9),e._uU(156),e.ALo(157,"extension"),e._UZ(158,"app-tabs",null,18),e.qZA(),e.TgZ(160,"pre")(161,"code",11),e._uU(162,"\nimport { Body, Controller, Post, HttpCode, HttpStatus } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: Record<string, any>) {\n    return this.authService.signIn(signInDto.username, signInDto.password);\n  }\n}\n"),e.qZA()(),e.TgZ(163,"blockquote",19)(164,"strong"),e._uU(165,"Hint"),e.qZA(),e._uU(166," Ideally, instead of using the "),e.TgZ(167,"code"),e._uU(168,"Record<string, any>"),e.qZA(),e._uU(169," type, we should use a DTO class to define the shape of the request body. See the "),e.TgZ(170,"a",20),e._uU(171,"validation"),e.qZA(),e._uU(172," chapter for more information.\n"),e.qZA(),e.TgZ(173,"p"),e._UZ(174,"app-banner-courses-auth"),e.qZA(),e.TgZ(175,"h4",21)(176,"span"),e._uU(177,"JWT token"),e.qZA()(),e.TgZ(178,"p"),e._uU(179,"We're ready to move on to the JWT portion of our auth system. Let's review and refine our requirements:"),e.qZA(),e.TgZ(180,"ul")(181,"li"),e._uU(182,"Allow users to authenticate with username/password, returning a JWT for use in subsequent calls to protected API endpoints. We're well on our way to meeting this requirement. To complete it, we'll need to write the code that issues a JWT."),e.qZA(),e.TgZ(183,"li"),e._uU(184,"Create API routes which are protected based on the presence of a valid JWT as a bearer token"),e.qZA()(),e.TgZ(185,"p"),e._uU(186,"We'll need to install one additional package to support our JWT requirements:"),e.qZA(),e.TgZ(187,"pre")(188,"code",8),e._uU(189,"\n$ npm install --save @nestjs/jwt\n"),e.qZA()(),e.TgZ(190,"blockquote",19)(191,"strong"),e._uU(192,"Hint"),e.qZA(),e._uU(193," The "),e.TgZ(194,"code"),e._uU(195,"@nestjs/jwt"),e.qZA(),e._uU(196," package (see more "),e.TgZ(197,"a",22),e._uU(198,"here"),e.qZA(),e._uU(199,") is a utility package that helps with JWT manipulation. This includes generating and verifying JWT tokens.\n"),e.qZA(),e.TgZ(200,"p"),e._uU(201,"To keep our services cleanly modularized, we'll handle generating the JWT in the "),e.TgZ(202,"code"),e._uU(203,"authService"),e.qZA(),e._uU(204,". Open the "),e.TgZ(205,"code"),e._uU(206,"auth.service.ts"),e.qZA(),e._uU(207," file in the "),e.TgZ(208,"code"),e._uU(209,"auth"),e.qZA(),e._uU(210," folder, inject the "),e.TgZ(211,"code"),e._uU(212,"JwtService"),e.qZA(),e._uU(213,", and update the "),e.TgZ(214,"code"),e._uU(215,"signIn"),e.qZA(),e._uU(216," method to generate a JWT token as shown below:"),e.qZA(),e.TgZ(217,"span",9),e._uU(218),e.ALo(219,"extension"),e._UZ(220,"app-tabs",null,23),e.qZA(),e.TgZ(222,"pre")(223,"code",11),e._uU(224,"\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n  ) {}\n\n  async signIn(\n    username: string,\n    pass: string,\n  ): Promise<{ access_token: string }> {\n    const user = await this.usersService.findOne(username);\n    if (user?.password !== pass) {\n      throw new UnauthorizedException();\n    }\n    const payload = { sub: user.userId, username: user.username };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(225,"pre")(226,"code",11),e._uU(227,"\nimport { Injectable, Dependencies, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\n\n@Dependencies(UsersService, JwtService)\n@Injectable()\nexport class AuthService {\n  constructor(usersService, jwtService) {\n    this.usersService = usersService;\n    this.jwtService = jwtService;\n  }\n\n  async signIn(username, pass) {\n    const user = await this.usersService.findOne(username);\n    if (user?.password !== pass) {\n      throw new UnauthorizedException();\n    }\n    const payload = { username: user.username, sub: user.userId };\n    return {\n      access_token: await this.jwtService.signAsync(payload),\n    };\n  }\n}\n"),e.qZA()(),e.TgZ(228,"p"),e._uU(229,"We're using the "),e.TgZ(230,"code"),e._uU(231,"@nestjs/jwt"),e.qZA(),e._uU(232," library, which supplies a "),e.TgZ(233,"code"),e._uU(234,"signAsync()"),e.qZA(),e._uU(235," function to generate our JWT from a subset of the "),e.TgZ(236,"code"),e._uU(237,"user"),e.qZA(),e._uU(238," object properties, which we then return as a simple object with a single "),e.TgZ(239,"code"),e._uU(240,"access_token"),e.qZA(),e._uU(241," property. Note: we choose a property name of "),e.TgZ(242,"code"),e._uU(243,"sub"),e.qZA(),e._uU(244," to hold our "),e.TgZ(245,"code"),e._uU(246,"userId"),e.qZA(),e._uU(247," value to be consistent with JWT standards."),e.qZA(),e.TgZ(248,"p"),e._uU(249,"We now need to update the "),e.TgZ(250,"code"),e._uU(251,"AuthModule"),e.qZA(),e._uU(252," to import the new dependencies and configure the "),e.TgZ(253,"code"),e._uU(254,"JwtModule"),e.qZA(),e._uU(255,"."),e.qZA(),e.TgZ(256,"p"),e._uU(257,"First, create "),e.TgZ(258,"code"),e._uU(259,"constants.ts"),e.qZA(),e._uU(260," in the "),e.TgZ(261,"code"),e._uU(262,"auth"),e.qZA(),e._uU(263," folder, and add the following code:"),e.qZA(),e.TgZ(264,"span",9),e._uU(265),e.ALo(266,"extension"),e._UZ(267,"app-tabs",null,24),e.qZA(),e.TgZ(269,"pre")(270,"code",11),e._uU(271,"\nexport const jwtConstants = {\n  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n};\n"),e.qZA()(),e.TgZ(272,"pre")(273,"code",11),e._uU(274,"\nexport const jwtConstants = {\n  secret: 'DO NOT USE THIS VALUE. INSTEAD, CREATE A COMPLEX SECRET AND KEEP IT SAFE OUTSIDE OF THE SOURCE CODE.',\n};\n"),e.qZA()(),e.TgZ(275,"p"),e._uU(276,"We'll use this to share our key between the JWT signing and verifying steps."),e.qZA(),e.TgZ(277,"blockquote",15)(278,"strong"),e._uU(279,"Warning"),e.qZA(),e.TgZ(280,"strong"),e._uU(281,"Do not expose this key publicly"),e.qZA(),e._uU(282,". We have done so here to make it clear what the code is doing, but in a production system "),e.TgZ(283,"strong"),e._uU(284,"you must protect this key"),e.qZA(),e._uU(285," using appropriate measures such as a secrets vault, environment variable, or configuration service.\n"),e.qZA(),e.TgZ(286,"p"),e._uU(287,"Now, open "),e.TgZ(288,"code"),e._uU(289,"auth.module.ts"),e.qZA(),e._uU(290," in the "),e.TgZ(291,"code"),e._uU(292,"auth"),e.qZA(),e._uU(293," folder and update it to look like this:"),e.qZA(),e.TgZ(294,"span",9),e._uU(295),e.ALo(296,"extension"),e._UZ(297,"app-tabs",null,25),e.qZA(),e.TgZ(299,"pre")(300,"code",11),e._uU(301,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),e.qZA()(),e.TgZ(302,"pre")(303,"code",11),e._uU(304,"\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n  providers: [AuthService],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"),e.qZA()(),e.TgZ(305,"blockquote",19)(306,"strong"),e._uU(307,"Hint"),e.qZA(),e._uU(308," We're registering the "),e.TgZ(309,"code"),e._uU(310,"JwtModule"),e.qZA(),e._uU(311," as global to make things easier for us. This means that we don't need to import the "),e.TgZ(312,"code"),e._uU(313,"JwtModule"),e.qZA(),e._uU(314," anywhere else in our application.\n"),e.qZA(),e.TgZ(315,"p"),e._uU(316,"We configure the "),e.TgZ(317,"code"),e._uU(318,"JwtModule"),e.qZA(),e._uU(319," using "),e.TgZ(320,"code"),e._uU(321,"register()"),e.qZA(),e._uU(322,", passing in a configuration object. See "),e.TgZ(323,"a",26),e._uU(324,"here"),e.qZA(),e._uU(325," for more on the Nest "),e.TgZ(326,"code"),e._uU(327,"JwtModule"),e.qZA(),e._uU(328," and "),e.TgZ(329,"a",27),e._uU(330,"here"),e.qZA(),e._uU(331," for more details on the available configuration options."),e.qZA(),e.TgZ(332,"p"),e._uU(333,"Let's go ahead and test our routes using cURL again. You can test with any of the "),e.TgZ(334,"code"),e._uU(335,"user"),e.qZA(),e._uU(336," objects hard-coded in the "),e.TgZ(337,"code"),e._uU(338,"UsersService"),e.qZA(),e._uU(339,"."),e.qZA(),e.TgZ(340,"pre")(341,"code",8),e._uU(342,'\n$ # POST to /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n{"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}\n$ # Note: above JWT truncated\n'),e.qZA()(),e.TgZ(343,"h4",28)(344,"span"),e._uU(345,"Implementing the authentication guard"),e.qZA()(),e.TgZ(346,"p"),e._uU(347,"We can now address our final requirement: protecting endpoints by requiring a valid JWT be present on the request. We'll do this by creating an "),e.TgZ(348,"code"),e._uU(349,"AuthGuard"),e.qZA(),e._uU(350," that we can use to protect our routes."),e.qZA(),e.TgZ(351,"span",9),e._uU(352),e.ALo(353,"extension"),e._UZ(354,"app-tabs",null,29),e.qZA(),e.TgZ(356,"pre")(357,"code",11),e._uU(358,"\nimport {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        {\n          secret: jwtConstants.secret\n        }\n      );\n      // \u{1f4a1} We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n"),e.qZA()(),e.TgZ(359,"p"),e._uU(360,"We can now implement our protected route and register our "),e.TgZ(361,"code"),e._uU(362,"AuthGuard"),e.qZA(),e._uU(363," to protect it."),e.qZA(),e.TgZ(364,"p"),e._uU(365,"Open the "),e.TgZ(366,"code"),e._uU(367,"auth.controller.ts"),e.qZA(),e._uU(368," file and update it as shown below:"),e.qZA(),e.TgZ(369,"span",9),e._uU(370),e.ALo(371,"extension"),e._UZ(372,"app-tabs",null,30),e.qZA(),e.TgZ(374,"pre")(375,"code",11),e._uU(376,"\nimport {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Request,\n  UseGuards\n} from '@nestjs/common';\nimport { AuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  signIn(@Body() signInDto: Record<string, any>) {\n    return this.authService.signIn(signInDto.username, signInDto.password);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n}\n"),e.qZA()(),e.TgZ(377,"p"),e._uU(378,"We're applying the "),e.TgZ(379,"code"),e._uU(380,"AuthGuard"),e.qZA(),e._uU(381," that we just created to the "),e.TgZ(382,"code"),e._uU(383,"GET /profile"),e.qZA(),e._uU(384," route so that it will be protected."),e.qZA(),e.TgZ(385,"p"),e._uU(386,"Ensure the app is running, and test the routes using "),e.TgZ(387,"code"),e._uU(388,"cURL"),e.qZA(),e._uU(389,"."),e.qZA(),e.TgZ(390,"pre")(391,"code",8),e._uU(392,'\n$ # GET /profile\n$ curl http://localhost:3000/auth/profile\n{"statusCode":401,"message":"Unauthorized"}\n\n$ # POST /auth/login\n$ curl -X POST http://localhost:3000/auth/login -d \'{"username": "john", "password": "changeme"}\' -H "Content-Type: application/json"\n{"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm..."}\n\n$ # GET /profile using access_token returned from previous step as bearer code\n$ curl http://localhost:3000/auth/profile -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm..."\n{"sub":1,"username":"john","iat":...,"exp":...}\n'),e.qZA()(),e.TgZ(393,"p"),e._uU(394,"Note that in the "),e.TgZ(395,"code"),e._uU(396,"AuthModule"),e.qZA(),e._uU(397,", we configured the JWT to have an expiration of "),e.TgZ(398,"code"),e._uU(399,"60 seconds"),e.qZA(),e._uU(400,". This is too short an expiration, and dealing with the details of token expiration and refresh is beyond the scope of this article. However, we chose that to demonstrate an important quality of JWTs. If you wait 60 seconds after authenticating before attempting a "),e.TgZ(401,"code"),e._uU(402,"GET /auth/profile"),e.qZA(),e._uU(403," request, you'll receive a "),e.TgZ(404,"code"),e._uU(405,"401 Unauthorized"),e.qZA(),e._uU(406," response. This is because "),e.TgZ(407,"code"),e._uU(408,"@nestjs/jwt"),e.qZA(),e._uU(409," automatically checks the JWT for its expiration time, saving you the trouble of doing so in your application."),e.qZA(),e.TgZ(410,"p"),e._uU(411,"We've now completed our JWT authentication implementation. JavaScript clients (such as Angular/React/Vue), and other JavaScript apps, can now authenticate and communicate securely with our API Server."),e.qZA(),e.TgZ(412,"h4",31)(413,"span"),e._uU(414,"Enable authentication globally"),e.qZA()(),e.TgZ(415,"p"),e._uU(416,"If the vast majority of your endpoints should be protected by default, you can register the authentication guard as a "),e.TgZ(417,"a",32),e._uU(418,"global guard"),e.qZA(),e._uU(419," and instead of using "),e.TgZ(420,"code"),e._uU(421,"@UseGuards()"),e.qZA(),e._uU(422," decorator on top of each controller, you could simply flag which routes should be public."),e.qZA(),e.TgZ(423,"p"),e._uU(424,"First, register the "),e.TgZ(425,"code"),e._uU(426,"AuthGuard"),e.qZA(),e._uU(427," as a global guard using the following construction (in any module, for example, in the "),e.TgZ(428,"code"),e._uU(429,"AuthModule"),e.qZA(),e._uU(430,"):"),e.qZA(),e.TgZ(431,"pre")(432,"code",11),e._uU(433,"\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: AuthGuard,\n  },\n],\n"),e.qZA()(),e.TgZ(434,"p"),e._uU(435,"With this in place, Nest will automatically bind "),e.TgZ(436,"code"),e._uU(437,"AuthGuard"),e.qZA(),e._uU(438," to all endpoints."),e.qZA(),e.TgZ(439,"p"),e._uU(440,"Now we must provide a mechanism for declaring routes as public. For this, we can create a custom decorator using the "),e.TgZ(441,"code"),e._uU(442,"SetMetadata"),e.qZA(),e._uU(443," decorator factory function."),e.qZA(),e.TgZ(444,"pre")(445,"code",11),e._uU(446,"\nimport { SetMetadata } from '@nestjs/common';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n"),e.qZA()(),e.TgZ(447,"p"),e._uU(448,"In the file above, we exported two constants. One being our metadata key named "),e.TgZ(449,"code"),e._uU(450,"IS_PUBLIC_KEY"),e.qZA(),e._uU(451,", and the other being our new decorator itself that we\u2019re going to call "),e.TgZ(452,"code"),e._uU(453,"Public"),e.qZA(),e._uU(454," (you can alternatively name it "),e.TgZ(455,"code"),e._uU(456,"SkipAuth"),e.qZA(),e._uU(457," or "),e.TgZ(458,"code"),e._uU(459,"AllowAnon"),e.qZA(),e._uU(460,", whatever fits your project)."),e.qZA(),e.TgZ(461,"p"),e._uU(462,"Now that we have a custom "),e.TgZ(463,"code"),e._uU(464,"@Public()"),e.qZA(),e._uU(465," decorator, we can use it to decorate any method, as follows:"),e.qZA(),e.TgZ(466,"pre")(467,"code",11),e._uU(468,"\n@Public()\n@Get()\nfindAll() {\n  return [];\n}\n"),e.qZA()(),e.TgZ(469,"p"),e._uU(470,"Lastly, we need the "),e.TgZ(471,"code"),e._uU(472,"AuthGuard"),e.qZA(),e._uU(473," to return "),e.TgZ(474,"code"),e._uU(475,"true"),e.qZA(),e._uU(476," when the "),e.TgZ(477,"code"),e._uU(478,'"isPublic"'),e.qZA(),e._uU(479," metadata is found. For this, we'll use the "),e.TgZ(480,"code"),e._uU(481,"Reflector"),e.qZA(),e._uU(482," class (read more "),e.TgZ(483,"a",33),e._uU(484,"here"),e.qZA(),e._uU(485,")."),e.qZA(),e.TgZ(486,"pre")(487,"code",11),e._uU(488,"\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      // \u{1f4a1} See this condition\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: jwtConstants.secret,\n      });\n      // \u{1f4a1} We're assigning the payload to the request object here\n      // so that we can access it in our route handlers\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n"),e.qZA()(),e.TgZ(489,"h4",34)(490,"span"),e._uU(491,"Passport integration"),e.qZA()(),e.TgZ(492,"p")(493,"a",35),e._uU(494,"Passport"),e.qZA(),e._uU(495," is the most popular node.js authentication library, well-known by the community and successfully used in many production applications. It's straightforward to integrate this library with a "),e.TgZ(496,"strong"),e._uU(497,"Nest"),e.qZA(),e._uU(498," application using the "),e.TgZ(499,"code"),e._uU(500,"@nestjs/passport"),e.qZA(),e._uU(501," module."),e.qZA(),e.TgZ(502,"p"),e._uU(503,"To learn how you can integrate Passport with NestJS, check out this "),e.TgZ(504,"a",36),e._uU(505,"chapter"),e.qZA(),e._uU(506,"."),e.qZA(),e.TgZ(507,"h4",37)(508,"span"),e._uU(509,"Example"),e.qZA()(),e.TgZ(510,"p"),e._uU(511,"You can find a complete version of the code in this chapter "),e.TgZ(512,"a",38),e._uU(513,"here"),e.qZA(),e._uU(514,"."),e.qZA()()),2&o){const c=e.MAs(62),a=e.MAs(87),l=e.MAs(109),d=e.MAs(140),p=e.MAs(159),U=e.MAs(221),A=e.MAs(268),_=e.MAs(298),w=e.MAs(355),v=e.MAs(373);e.xp6(59),e.hij(" ",e.xi3(60,38,"users/users.service",c.isJsActive),"\n"),e.xp6(4),e.ekj("hide",c.isJsActive),e.xp6(3),e.ekj("hide",!c.isJsActive),e.xp6(18),e.hij(" ",e.xi3(85,41,"users/users.module",a.isJsActive),"\n"),e.xp6(4),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive),e.xp6(15),e.hij(" ",e.xi3(107,44,"auth/auth.service",l.isJsActive),"\n"),e.xp6(4),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(24),e.hij(" ",e.xi3(138,47,"auth/auth.module",d.isJsActive),"\n"),e.xp6(4),e.ekj("hide",d.isJsActive),e.xp6(3),e.ekj("hide",!d.isJsActive),e.xp6(12),e.hij(" ",e.xi3(157,50,"auth/auth.controller",p.isJsActive),"\n"),e.xp6(62),e.hij(" ",e.xi3(219,53,"auth/auth.service",U.isJsActive),"\n"),e.xp6(4),e.ekj("hide",U.isJsActive),e.xp6(3),e.ekj("hide",!U.isJsActive),e.xp6(40),e.hij(" ",e.xi3(266,56,"auth/constants",A.isJsActive),"\n"),e.xp6(4),e.ekj("hide",A.isJsActive),e.xp6(3),e.ekj("hide",!A.isJsActive),e.xp6(23),e.hij(" ",e.xi3(296,59,"auth/auth.module",_.isJsActive),"\n"),e.xp6(4),e.ekj("hide",_.isJsActive),e.xp6(3),e.ekj("hide",!_.isJsActive),e.xp6(50),e.hij(" ",e.xi3(353,62,"auth/auth.guard",w.isJsActive),"\n"),e.xp6(18),e.hij(" ",e.xi3(371,65,"auth.controller",v.isJsActive),"\n")}},dependencies:[g.n,u.U,f.N,h.rH,Z.F],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Authentication"}},{path:"cors",component:(()=>{class t extends i.y{static \u0275fac=function(){let n;return function(s){return(n||(n=e.n5z(t)))(s||t)}}();static \u0275cmp=e.Xpm({type:t,selectors:[["app-cors"]],features:[e.qOj],decls:60,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/cors.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","cors"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/cors"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify-cors"],["appAnchor","","id","getting-started"],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/cors#configuration-options"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/cors#configuring-cors-asynchronously"]],template:function(o,s){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"CORS"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Cross-origin resource sharing (CORS) is a mechanism that allows resources to be requested from another domain. Under the hood, Nest makes use of the Express "),e.TgZ(9,"a",6),e._uU(10,"cors"),e.qZA(),e._uU(11," or Fastify "),e.TgZ(12,"a",7),e._uU(13,"@fastify/cors"),e.qZA(),e._uU(14," packages depending on the underlying platform. These packages provide various options that you can customize based on your requirements."),e.qZA(),e.TgZ(15,"h4",8)(16,"span"),e._uU(17,"Getting started"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"To enable CORS, call the "),e.TgZ(20,"code"),e._uU(21,"enableCors()"),e.qZA(),e._uU(22," method on the Nest application object."),e.qZA(),e.TgZ(23,"pre")(24,"code",9),e._uU(25,"\nconst app = await NestFactory.create(AppModule);\napp.enableCors();\nawait app.listen(3000);\n"),e.qZA()(),e.TgZ(26,"p"),e._uU(27,"The "),e.TgZ(28,"code"),e._uU(29,"enableCors()"),e.qZA(),e._uU(30," method takes an optional configuration object argument. The available properties of this object are described in the official "),e.TgZ(31,"a",10),e._uU(32,"CORS"),e.qZA(),e._uU(33," documentation. Another way is to pass a "),e.TgZ(34,"a",11),e._uU(35,"callback function"),e.qZA(),e._uU(36," that lets you define the configuration object asynchronously based on the request (on the fly)."),e.qZA(),e.TgZ(37,"p"),e._uU(38,"Alternatively, enable CORS via the "),e.TgZ(39,"code"),e._uU(40,"create()"),e.qZA(),e._uU(41," method's options object. Set the "),e.TgZ(42,"code"),e._uU(43,"cors"),e.qZA(),e._uU(44," property to "),e.TgZ(45,"code"),e._uU(46,"true"),e.qZA(),e._uU(47," to enable CORS with default settings.\nOr, pass a "),e.TgZ(48,"a",10),e._uU(49,"CORS configuration object"),e.qZA(),e._uU(50," or "),e.TgZ(51,"a",11),e._uU(52,"callback function"),e.qZA(),e._uU(53," as the "),e.TgZ(54,"code"),e._uU(55,"cors"),e.qZA(),e._uU(56," property value to customize its behavior."),e.qZA(),e.TgZ(57,"pre")(58,"code",9),e._uU(59,"\nconst app = await NestFactory.create(AppModule, { cors: true });\nawait app.listen(3000);\n"),e.qZA()()())},dependencies:[u.U],encapsulation:2,changeDetection:0})}return t})(),data:{title:"CORS"}},{path:"helmet",component:(()=>{class t extends i.y{static \u0275fac=function(){let n;return function(s){return(n||(n=e.n5z(t)))(s||t)}}();static \u0275cmp=e.Xpm({type:t,selectors:[["app-helmet"]],features:[e.qOj],decls:108,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/helmet.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","helmet"],["rel","nofollow","target","_blank","href","https://github.com/helmetjs/helmet"],["rel","nofollow","target","_blank","href","https://github.com/helmetjs/helmet#how-it-works"],[1,"info"],["appAnchor","","id","use-with-express-default"],[1,"language-bash"],[1,"language-typescript"],[1,"warning"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/graphql/quick-start#apollo-sandbox"],["rel","nofollow","target","_blank","href","https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"],["appAnchor","","id","use-with-fastify"],["rel","nofollow","target","_blank","href","https://github.com/fastify/fastify-helmet"],["rel","nofollow","target","_blank","href","https://www.fastify.io/docs/latest/Reference/Plugins/"]],template:function(o,s){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Helmet"),e.qZA(),e.TgZ(7,"p")(8,"a",6),e._uU(9,"Helmet"),e.qZA(),e._uU(10," can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Generally, Helmet is just a collection of smaller middleware functions that set security-related HTTP headers (read "),e.TgZ(11,"a",7),e._uU(12,"more"),e.qZA(),e._uU(13,")."),e.qZA(),e.TgZ(14,"blockquote",8)(15,"strong"),e._uU(16,"Hint"),e.qZA(),e._uU(17," Note that applying "),e.TgZ(18,"code"),e._uU(19,"helmet"),e.qZA(),e._uU(20," as global or registering it must come before other calls to "),e.TgZ(21,"code"),e._uU(22,"app.use()"),e.qZA(),e._uU(23," or setup functions that may call "),e.TgZ(24,"code"),e._uU(25,"app.use()"),e.qZA(),e._uU(26,". This is due to the way the underlying platform (i.e., Express or Fastify) works, where the order that middleware/routes are defined matters. If you use middleware like "),e.TgZ(27,"code"),e._uU(28,"helmet"),e.qZA(),e._uU(29," or "),e.TgZ(30,"code"),e._uU(31,"cors"),e.qZA(),e._uU(32," after you define a route, then that middleware will not apply to that route, it will only apply to routes defined after the middleware.\n"),e.qZA(),e.TgZ(33,"h4",9)(34,"span"),e._uU(35,"Use with Express (default)"),e.qZA()(),e.TgZ(36,"p"),e._uU(37,"Start by installing the required package."),e.qZA(),e.TgZ(38,"pre")(39,"code",10),e._uU(40,"\n$ npm i --save helmet\n"),e.qZA()(),e.TgZ(41,"p"),e._uU(42,"Once the installation is complete, apply it as a global middleware."),e.qZA(),e.TgZ(43,"pre")(44,"code",11),e._uU(45,"\nimport helmet from 'helmet';\n// somewhere in your initialization file\napp.use(helmet());\n"),e.qZA()(),e.TgZ(46,"blockquote",12)(47,"strong"),e._uU(48,"Warning"),e.qZA(),e._uU(49," When using "),e.TgZ(50,"code"),e._uU(51,"helmet"),e.qZA(),e._uU(52,", "),e.TgZ(53,"code"),e._uU(54,"@apollo/server"),e.qZA(),e._uU(55," (4.x), and the "),e.TgZ(56,"a",13),e._uU(57,"Apollo Sandbox"),e.qZA(),e._uU(58,", there may be a problem with "),e.TgZ(59,"a",14),e._uU(60,"CSP"),e.qZA(),e._uU(61," on the Apollo Sandbox. To solve this issue configure the CSP as shown below:\n"),e.TgZ(62,"pre")(63,"code",11),e._uU(64,"\napp.use(helmet({\n  crossOriginEmbedderPolicy: false,\n  contentSecurityPolicy: {\n    directives: {\n      imgSrc: [`'self'`, 'data:', 'apollo-server-landing-page.cdn.apollographql.com'],\n      scriptSrc: [`'self'`, `https: 'unsafe-inline'`],\n      manifestSrc: [`'self'`, 'apollo-server-landing-page.cdn.apollographql.com'],\n      frameSrc: [`'self'`, 'sandbox.embed.apollographql.com'],\n    },\n  },\n}));\n"),e.qZA()()(),e.TgZ(65,"h4",15)(66,"span"),e._uU(67,"Use with Fastify"),e.qZA()(),e.TgZ(68,"p"),e._uU(69,"If you are using the "),e.TgZ(70,"code"),e._uU(71,"FastifyAdapter"),e.qZA(),e._uU(72,", install the "),e.TgZ(73,"a",16),e._uU(74,"@fastify/helmet"),e.qZA(),e._uU(75," package:"),e.qZA(),e.TgZ(76,"pre")(77,"code",10),e._uU(78,"\n$ npm i --save @fastify/helmet\n"),e.qZA()(),e.TgZ(79,"p")(80,"a",16),e._uU(81,"fastify-helmet"),e.qZA(),e._uU(82," should not be used as a middleware, but as a "),e.TgZ(83,"a",17),e._uU(84,"Fastify plugin"),e.qZA(),e._uU(85,", i.e., by using "),e.TgZ(86,"code"),e._uU(87,"app.register()"),e.qZA(),e._uU(88,":"),e.qZA(),e.TgZ(89,"pre")(90,"code",11),e._uU(91,"\nimport helmet from '@fastify/helmet'\n// somewhere in your initialization file\nawait app.register(helmet)\n"),e.qZA()(),e.TgZ(92,"blockquote",12)(93,"strong"),e._uU(94,"Warning"),e.qZA(),e._uU(95," When using "),e.TgZ(96,"code"),e._uU(97,"apollo-server-fastify"),e.qZA(),e._uU(98," and "),e.TgZ(99,"code"),e._uU(100,"@fastify/helmet"),e.qZA(),e._uU(101,", there may be a problem with "),e.TgZ(102,"a",14),e._uU(103,"CSP"),e.qZA(),e._uU(104," on the GraphQL playground, to solve this collision, configure the CSP as shown below:\n"),e.TgZ(105,"pre")(106,"code",11),e._uU(107,"\nawait app.register(fastifyHelmet, {\n   contentSecurityPolicy: {\n     directives: {\n       defaultSrc: [`'self'`, 'unpkg.com'],\n       styleSrc: [\n         `'self'`,\n         `'unsafe-inline'`,\n         'cdn.jsdelivr.net',\n         'fonts.googleapis.com',\n         'unpkg.com',\n       ],\n       fontSrc: [`'self'`, 'fonts.gstatic.com', 'data:'],\n       imgSrc: [`'self'`, 'data:', 'cdn.jsdelivr.net'],\n       scriptSrc: [\n         `'self'`,\n         `https: 'unsafe-inline'`,\n         `cdn.jsdelivr.net`,\n         `'unsafe-eval'`,\n       ],\n     },\n   },\n });\n\n// If you are not going to use CSP at all, you can use this:\nawait app.register(fastifyHelmet, {\n  contentSecurityPolicy: false,\n});\n"),e.qZA()()()())},dependencies:[u.U],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Helmet"}},{path:"encryption-and-hashing",component:(()=>{class t extends i.y{static \u0275fac=function(){let n;return function(s){return(n||(n=e.n5z(t)))(s||t)}}();static \u0275cmp=e.Xpm({type:t,selectors:[["app-encryption-hashing"]],features:[e.qOj],decls:89,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/encryption-hashing.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","encryption-and-hashing"],["appAnchor","","id","encryption"],["rel","nofollow","target","_blank","href","https://nodejs.org/api/crypto.html"],[1,"language-typescript"],["appAnchor","","id","hashing"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/bcrypt"],["rel","nofollow","target","_blank","href","https://www.npmjs.com/package/argon2"],[1,"language-shell"]],template:function(o,s){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Encryption and Hashing"),e.qZA(),e.TgZ(7,"p")(8,"strong"),e._uU(9,"Encryption"),e.qZA(),e._uU(10," is the process of encoding information. This process converts the original representation of the information, known as plaintext, into an alternative form known as ciphertext. Ideally, only authorized parties can decipher a ciphertext back to plaintext and access the original information. Encryption does not itself prevent interference but denies the intelligible content to a would-be interceptor. Encryption is a two-way function; what is encrypted can be decrypted with the proper key."),e.qZA(),e.TgZ(11,"p")(12,"strong"),e._uU(13,"Hashing"),e.qZA(),e._uU(14," is the process of converting a given key into another value. A hash function is used to generate the new value according to a mathematical algorithm. Once hashing has been done, it should be impossible to go from the output to the input."),e.qZA(),e.TgZ(15,"h4",6)(16,"span"),e._uU(17,"Encryption"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"Node.js provides a built-in "),e.TgZ(20,"a",7),e._uU(21,"crypto module"),e.qZA(),e._uU(22," that you can use to encrypt and decrypt strings, numbers, buffers, streams, and more. Nest itself does not provide any additional package on top of this module to avoid introducing unnecessary abstractions."),e.qZA(),e.TgZ(23,"p"),e._uU(24,"As an example, let's use AES (Advanced Encryption System) "),e.TgZ(25,"code"),e._uU(26,"'aes-256-ctr'"),e.qZA(),e._uU(27," algorithm CTR encryption mode."),e.qZA(),e.TgZ(28,"pre")(29,"code",8),e._uU(30,"\nimport { createCipheriv, randomBytes, scrypt } from 'crypto';\nimport { promisify } from 'util';\n\nconst iv = randomBytes(16);\nconst password = 'Password used to generate key';\n\n// The key length is dependent on the algorithm.\n// In this case for aes256, it is 32 bytes.\nconst key = (await promisify(scrypt)(password, 'salt', 32)) as Buffer;\nconst cipher = createCipheriv('aes-256-ctr', key, iv);\n\nconst textToEncrypt = 'Nest';\nconst encryptedText = Buffer.concat([\n  cipher.update(textToEncrypt),\n  cipher.final(),\n]);\n"),e.qZA()(),e.TgZ(31,"p"),e._uU(32,"Now to decrypt "),e.TgZ(33,"code"),e._uU(34,"encryptedText"),e.qZA(),e._uU(35," value:"),e.qZA(),e.TgZ(36,"pre")(37,"code",8),e._uU(38,"\nimport { createDecipheriv } from 'crypto';\n\nconst decipher = createDecipheriv('aes-256-ctr', key, iv);\nconst decryptedText = Buffer.concat([\n  decipher.update(encryptedText),\n  decipher.final(),\n]);\n"),e.qZA()(),e.TgZ(39,"h4",9)(40,"span"),e._uU(41,"Hashing"),e.qZA()(),e.TgZ(42,"p"),e._uU(43,"For hashing, we recommend using either the "),e.TgZ(44,"a",10),e._uU(45,"bcrypt"),e.qZA(),e._uU(46," or "),e.TgZ(47,"a",11),e._uU(48,"argon2"),e.qZA(),e._uU(49," packages. Nest itself does not provide any additional wrappers on top of these modules to avoid introducing unnecessary abstractions (making the learning curve short)."),e.qZA(),e.TgZ(50,"p"),e._uU(51,"As an example, let's use "),e.TgZ(52,"code"),e._uU(53,"bcrypt"),e.qZA(),e._uU(54," to hash a random password."),e.qZA(),e.TgZ(55,"p"),e._uU(56,"First install required packages:"),e.qZA(),e.TgZ(57,"pre")(58,"code",12),e._uU(59,"\n$ npm i bcrypt\n$ npm i -D @types/bcrypt\n"),e.qZA()(),e.TgZ(60,"p"),e._uU(61,"Once the installation is complete, you can use the "),e.TgZ(62,"code"),e._uU(63,"hash"),e.qZA(),e._uU(64," function, as follows:"),e.qZA(),e.TgZ(65,"pre")(66,"code",8),e._uU(67,"\nimport * as bcrypt from 'bcrypt';\n\nconst saltOrRounds = 10;\nconst password = 'random_password';\nconst hash = await bcrypt.hash(password, saltOrRounds);\n"),e.qZA()(),e.TgZ(68,"p"),e._uU(69,"To generate a salt, use the "),e.TgZ(70,"code"),e._uU(71,"genSalt"),e.qZA(),e._uU(72," function:"),e.qZA(),e.TgZ(73,"pre")(74,"code",8),e._uU(75,"\nconst salt = await bcrypt.genSalt();\n"),e.qZA()(),e.TgZ(76,"p"),e._uU(77,"To compare/check a password, use the "),e.TgZ(78,"code"),e._uU(79,"compare"),e.qZA(),e._uU(80," function:"),e.qZA(),e.TgZ(81,"pre")(82,"code",8),e._uU(83,"\nconst isMatch = await bcrypt.compare(password, hash);\n"),e.qZA()(),e.TgZ(84,"p"),e._uU(85,"You can read more about available functions "),e.TgZ(86,"a",10),e._uU(87,"here"),e.qZA(),e._uU(88,"."),e.qZA()())},dependencies:[u.U],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Encryption and Hashing"}},{path:"csrf",component:(()=>{class t extends i.y{static \u0275fac=function(){let n;return function(s){return(n||(n=e.n5z(t)))(s||t)}}();static \u0275cmp=e.Xpm({type:t,selectors:[["app-csrf"]],features:[e.qOj],decls:78,vars:0,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/csrf.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","csrf-protection"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/csurf"],["appAnchor","","id","use-with-express-default"],[1,"language-bash"],[1,"warning"],["rel","nofollow","target","_blank","href","https://github.com/expressjs/csurf#csurf"],[1,"language-typescript"],["appAnchor","","id","use-with-fastify"],["rel","nofollow","target","_blank","href","https://github.com/fastify/csrf-protection#usage"]],template:function(o,s){1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"CSRF Protection"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"Cross-site request forgery (also known as CSRF or XSRF) is a type of malicious exploit of a website where "),e.TgZ(9,"strong"),e._uU(10,"unauthorized"),e.qZA(),e._uU(11," commands are transmitted from a user that the web application trusts. To mitigate this kind of attack you can use the "),e.TgZ(12,"a",6),e._uU(13,"csurf"),e.qZA(),e._uU(14," package."),e.qZA(),e.TgZ(15,"h4",7)(16,"span"),e._uU(17,"Use with Express (default)"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"Start by installing the required package:"),e.qZA(),e.TgZ(20,"pre")(21,"code",8),e._uU(22,"\n$ npm i --save csurf\n"),e.qZA()(),e.TgZ(23,"blockquote",9)(24,"strong"),e._uU(25,"Warning"),e.qZA(),e._uU(26," This package is deprecated, refer to "),e.TgZ(27,"a",10)(28,"code"),e._uU(29,"csurf"),e.qZA(),e._uU(30," docs"),e.qZA(),e._uU(31," for more information.\n"),e.qZA(),e.TgZ(32,"blockquote",9)(33,"strong"),e._uU(34,"Warning"),e.qZA(),e._uU(35," As explained in the "),e.TgZ(36,"a",10)(37,"code"),e._uU(38,"csurf"),e.qZA(),e._uU(39," docs"),e.qZA(),e._uU(40,", this middleware requires either session middleware or "),e.TgZ(41,"code"),e._uU(42,"cookie-parser"),e.qZA(),e._uU(43," to be initialized first. Please see that documentation for further instructions.\n"),e.qZA(),e.TgZ(44,"p"),e._uU(45,"Once the installation is complete, apply the "),e.TgZ(46,"code"),e._uU(47,"csurf"),e.qZA(),e._uU(48," middleware as global middleware."),e.qZA(),e.TgZ(49,"pre")(50,"code",11),e._uU(51,"\nimport * as csurf from 'csurf';\n// ...\n// somewhere in your initialization file\napp.use(csurf());\n"),e.qZA()(),e.TgZ(52,"h4",12)(53,"span"),e._uU(54,"Use with Fastify"),e.qZA()(),e.TgZ(55,"p"),e._uU(56,"Start by installing the required package:"),e.qZA(),e.TgZ(57,"pre")(58,"code",8),e._uU(59,"\n$ npm i --save @fastify/csrf-protection\n"),e.qZA()(),e.TgZ(60,"p"),e._uU(61,"Once the installation is complete, register the "),e.TgZ(62,"code"),e._uU(63,"@fastify/csrf-protection"),e.qZA(),e._uU(64," plugin, as follows:"),e.qZA(),e.TgZ(65,"pre")(66,"code",11),e._uU(67,"\nimport fastifyCsrf from '@fastify/csrf-protection';\n// ...\n// somewhere in your initialization file after registering some storage plugin\nawait app.register(fastifyCsrf);\n"),e.qZA()(),e.TgZ(68,"blockquote",9)(69,"strong"),e._uU(70,"Warning"),e.qZA(),e._uU(71," As explained in the "),e.TgZ(72,"code"),e._uU(73,"@fastify/csrf-protection"),e.qZA(),e._uU(74," docs "),e.TgZ(75,"a",13),e._uU(76,"here"),e.qZA(),e._uU(77,", this plugin requires a storage plugin to be initialized first. Please, see that documentation for further instructions.\n"),e.qZA()())},dependencies:[u.U],encapsulation:2,changeDetection:0})}return t})(),data:{title:"CSRF"}},{path:"rate-limiting",component:(()=>{class t extends i.y{static \u0275fac=function(){let n;return function(s){return(n||(n=e.n5z(t)))(s||t)}}();static \u0275cmp=e.Xpm({type:t,selectors:[["app-rate-limiting"]],features:[e.qOj],decls:453,vars:10,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/rate-limiting.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","rate-limiting"],[1,"language-bash"],[1,"filename"],["appaf217898953f6e598b9d95a1d9e3af18ffac2236",""],[1,"language-typescript"],["rel","nofollow","target","_blank","href","https://docs.nestjs.com/guards"],["appAnchor","","id","multiple-throttler-definitions"],["app2c205dc00f2453f6c011a699cf2bd64d232074d8",""],["appAnchor","","id","customization"],["appAnchor","","id","proxies"],["rel","nofollow","target","_blank","href","http://expressjs.com/en/guide/behind-proxies.html"],["rel","nofollow","target","_blank","href","https://www.fastify.io/docs/latest/Reference/Server/#trustproxy"],[1,"info"],["rel","nofollow","target","_blank","href","https://expressjs.com/en/api.html#req.ips"],["rel","nofollow","target","_blank","href","https://www.fastify.io/docs/latest/Reference/Request/"],["appAnchor","","id","websockets"],["appAnchor","","id","graphql"],["appAnchor","","id","configuration"],["href","/security/rate-limiting#storages"],["appAnchor","","id","async-configuration"],["appAnchor","","id","storages"],["rel","nofollow","target","_blank","href","https://github.com/kkoomen/nestjs-throttler-storage-redis"],["appAnchor","","id","time-helpers"],["appAnchor","","id","migration-guide"],[1,"Warning"],["rel","nofollow","target","_blank","href","https://github.com/nestjs/throttler/blob/master/CHANGELOG.md#500"]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Rate Limiting"),e.qZA(),e.TgZ(7,"p"),e._uU(8,"A common technique to protect applications from brute-force attacks is "),e.TgZ(9,"strong"),e._uU(10,"rate-limiting"),e.qZA(),e._uU(11,". To get started, you'll need to install the "),e.TgZ(12,"code"),e._uU(13,"@nestjs/throttler"),e.qZA(),e._uU(14," package."),e.qZA(),e.TgZ(15,"pre")(16,"code",6),e._uU(17,"\n$ npm i --save @nestjs/throttler\n"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"Once the installation is complete, the "),e.TgZ(20,"code"),e._uU(21,"ThrottlerModule"),e.qZA(),e._uU(22," can be configured as any other Nest package with "),e.TgZ(23,"code"),e._uU(24,"forRoot"),e.qZA(),e._uU(25," or "),e.TgZ(26,"code"),e._uU(27,"forRootAsync"),e.qZA(),e._uU(28," methods."),e.qZA(),e.TgZ(29,"span",7),e._uU(30),e.ALo(31,"extension"),e._UZ(32,"app-tabs",null,8),e.qZA(),e.TgZ(34,"pre")(35,"code",9),e._uU(36,"\n@Module({\n  imports: [\n    ThrottlerModule.forRoot([{\n      ttl: 60000,\n      limit: 10,\n    }]),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(37,"p"),e._uU(38,"The above will set the global options for the "),e.TgZ(39,"code"),e._uU(40,"ttl"),e.qZA(),e._uU(41,", the time to live in milliseconds, and the "),e.TgZ(42,"code"),e._uU(43,"limit"),e.qZA(),e._uU(44,", the maximum number of requests within the ttl, for the routes of your application that are guarded."),e.qZA(),e.TgZ(45,"p"),e._uU(46,"Once the module has been imported, you can then choose how you would like to bind the "),e.TgZ(47,"code"),e._uU(48,"ThrottlerGuard"),e.qZA(),e._uU(49,". Any kind of binding as mentioned in the "),e.TgZ(50,"a",10),e._uU(51,"guards"),e.qZA(),e._uU(52," section is fine. If you wanted to bind the guard globally, for example, you could do so by adding this provider to any module:"),e.qZA(),e.TgZ(53,"pre")(54,"code",9),e._uU(55,"\n{\n  provide: APP_GUARD,\n  useClass: ThrottlerGuard\n}\n"),e.qZA()(),e.TgZ(56,"h4",11)(57,"span"),e._uU(58,"Multiple Throttler Definitions"),e.qZA()(),e.TgZ(59,"p"),e._uU(60,"There may come upon times where you want to set up multiple throttling definitions, like no more than 3 calls in a second, 20 calls in 10 seconds, and 100 calls in a minute. To do so, you can set up your definitions in the array with named options, that can later be referenced in the "),e.TgZ(61,"code"),e._uU(62,"@SkipThrottle()"),e.qZA(),e._uU(63," and "),e.TgZ(64,"code"),e._uU(65,"@Throttle()"),e.qZA(),e._uU(66," decorators to change the options again."),e.qZA(),e.TgZ(67,"span",7),e._uU(68),e.ALo(69,"extension"),e._UZ(70,"app-tabs",null,12),e.qZA(),e.TgZ(72,"pre")(73,"code",9),e._uU(74,"\n@Module({\n  imports: [\n    ThrottlerModule.forRoot([\n      {\n        name: 'short',\n        ttl: 1000,\n        limit: 3,\n      },\n      {\n        name: 'medium',\n        ttl: 10000,\n        limit: 20\n      },\n      {\n        name: 'long',\n        ttl: 60000,\n        limit: 100\n      }\n    ]),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(75,"h4",13)(76,"span"),e._uU(77,"Customization"),e.qZA()(),e.TgZ(78,"p"),e._uU(79,"There may be a time where you want to bind the guard to a controller or globally, but want to disable rate limiting for one or more of your endpoints. For that, you can use the "),e.TgZ(80,"code"),e._uU(81,"@SkipThrottle()"),e.qZA(),e._uU(82," decorator, to negate the throttler for an entire class or a single route. The "),e.TgZ(83,"code"),e._uU(84,"@SkipThrottle()"),e.qZA(),e._uU(85," decorator can also take in an object of string keys with boolean values for if there is a case where you want to exclude "),e.TgZ(86,"em"),e._uU(87,"most"),e.qZA(),e._uU(88," of a controller, but not every route, and configure it per throttler set if you have more than one. If you do not pass an object, the default is to use "),e.TgZ(89,"code"),e._uU(90),e.qZA()(),e.TgZ(91,"pre")(92,"code",9),e._uU(93,"\n@SkipThrottle()\n@Controller('users')\nexport class UsersController {}\n"),e.qZA()(),e.TgZ(94,"p"),e._uU(95,"This "),e.TgZ(96,"code"),e._uU(97,"@SkipThrottle()"),e.qZA(),e._uU(98," decorator can be used to skip a route or a class or to negate the skipping of a route in a class that is skipped."),e.qZA(),e.TgZ(99,"pre")(100,"code",9),e._uU(101,"\n@SkipThrottle()\n@Controller('users')\nexport class UsersController {\n  // Rate limiting is applied to this route.\n  @SkipThrottle({ default: false })\n  dontSkip() {\n    return 'List users work with Rate limiting.';\n  }\n  // This route will skip rate limiting.\n  doSkip() {\n    return 'List users work without Rate limiting.';\n  }\n}\n"),e.qZA()(),e.TgZ(102,"p"),e._uU(103,"There is also the "),e.TgZ(104,"code"),e._uU(105,"@Throttle()"),e.qZA(),e._uU(106," decorator which can be used to override the "),e.TgZ(107,"code"),e._uU(108,"limit"),e.qZA(),e._uU(109," and "),e.TgZ(110,"code"),e._uU(111,"ttl"),e.qZA(),e._uU(112," set in the global module, to give tighter or looser security options. This decorator can be used on a class or a function as well. With version 5 and onwards, the decorator takes in an object with the string relating to the name of the throttler set, and an object with the limit and ttl keys and integer values, similar to the options passed to the root module. If you do not have a name set in your original options, use the string "),e.TgZ(113,"code"),e._uU(114,"default"),e.qZA(),e._uU(115," You have to configure it like this:"),e.qZA(),e.TgZ(116,"pre")(117,"code",9),e._uU(118,'\n// Override default configuration for Rate limiting and duration.\n@Throttle({ default: { limit: 3, ttl: 60000 } })\n@Get()\nfindAll() {\n  return "List users works with custom rate limiting.";\n}\n'),e.qZA()(),e.TgZ(119,"h4",14)(120,"span"),e._uU(121,"Proxies"),e.qZA()(),e.TgZ(122,"p"),e._uU(123,"If your application runs behind a proxy server, check the specific HTTP adapter options ("),e.TgZ(124,"a",15),e._uU(125,"express"),e.qZA(),e._uU(126," and "),e.TgZ(127,"a",16),e._uU(128,"fastify"),e.qZA(),e._uU(129,") for the "),e.TgZ(130,"code"),e._uU(131,"trust proxy"),e.qZA(),e._uU(132," option and enable it. Doing so will allow you to get the original IP address from the "),e.TgZ(133,"code"),e._uU(134,"X-Forwarded-For"),e.qZA(),e._uU(135," header, and you can override the "),e.TgZ(136,"code"),e._uU(137,"getTracker()"),e.qZA(),e._uU(138," method to pull the value from the header rather than from "),e.TgZ(139,"code"),e._uU(140,"req.ip"),e.qZA(),e._uU(141,". The following example works with both express and fastify:"),e.qZA(),e.TgZ(142,"pre")(143,"code",9),e._uU(144,"\n// throttler-behind-proxy.guard.ts\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ThrottlerBehindProxyGuard extends ThrottlerGuard {\n  protected async getTracker(req: Record<string, any>): Promise<string> {\n    return req.ips.length ? req.ips[0] : req.ip; // individualize IP extraction to meet your own needs\n  }\n}\n\n// app.controller.ts\nimport { ThrottlerBehindProxyGuard } from './throttler-behind-proxy.guard';\n\n@UseGuards(ThrottlerBehindProxyGuard)\n"),e.qZA()(),e.TgZ(145,"blockquote",17)(146,"strong"),e._uU(147,"Hint"),e.qZA(),e._uU(148," You can find the API of the "),e.TgZ(149,"code"),e._uU(150,"req"),e.qZA(),e._uU(151," Request object for express "),e.TgZ(152,"a",18),e._uU(153,"here"),e.qZA(),e._uU(154," and for fastify "),e.TgZ(155,"a",19),e._uU(156,"here"),e.qZA(),e._uU(157,".\n"),e.qZA(),e.TgZ(158,"h4",20)(159,"span"),e._uU(160,"Websockets"),e.qZA()(),e.TgZ(161,"p"),e._uU(162,"This module can work with websockets, but it requires some class extension. You can extend the "),e.TgZ(163,"code"),e._uU(164,"ThrottlerGuard"),e.qZA(),e._uU(165," and override the "),e.TgZ(166,"code"),e._uU(167,"handleRequest"),e.qZA(),e._uU(168," method like so:"),e.qZA(),e.TgZ(169,"pre")(170,"code",9),e._uU(171,"\n@Injectable()\nexport class WsThrottlerGuard extends ThrottlerGuard {\n  async handleRequest(context: ExecutionContext, limit: number, ttl: number, throttler: ThrottlerOptions): Promise<boolean> {\n    const client = context.switchToWs().getClient();\n    const ip = client._socket.remoteAddress;\n    const key = this.generateKey(context, ip, throttler.name);\n    const { totalHits } = await this.storageService.increment(key, ttl);\n\n    if (totalHits > limit) {\n      throw new ThrottlerException();\n    }\n\n    return true;\n  }\n}\n"),e.qZA()(),e.TgZ(172,"blockquote",17)(173,"strong"),e._uU(174,"Hint"),e.qZA(),e._uU(175," If you are using ws, it is necessary to replace the "),e.TgZ(176,"code"),e._uU(177,"_socket"),e.qZA(),e._uU(178," with "),e.TgZ(179,"code"),e._uU(180,"conn"),e.qZA()(),e.TgZ(181,"p"),e._uU(182,"There's a few things to keep in mind when working with WebSockets:"),e.qZA(),e.TgZ(183,"ul")(184,"li"),e._uU(185,"Guard cannot be registered with the "),e.TgZ(186,"code"),e._uU(187,"APP_GUARD"),e.qZA(),e._uU(188," or "),e.TgZ(189,"code"),e._uU(190,"app.useGlobalGuards()"),e.qZA()(),e.TgZ(191,"li"),e._uU(192,"When a limit is reached, Nest will emit an "),e.TgZ(193,"code"),e._uU(194,"exception"),e.qZA(),e._uU(195," event, so make sure there is a listener ready for this"),e.qZA()(),e.TgZ(196,"blockquote",17)(197,"strong"),e._uU(198,"Hint"),e.qZA(),e._uU(199," If you are using the "),e.TgZ(200,"code"),e._uU(201,"@nestjs/platform-ws"),e.qZA(),e._uU(202," package you can use "),e.TgZ(203,"code"),e._uU(204,"client._socket.remoteAddress"),e.qZA(),e._uU(205," instead.\n"),e.qZA(),e.TgZ(206,"h4",21)(207,"span"),e._uU(208,"GraphQL"),e.qZA()(),e.TgZ(209,"p"),e._uU(210,"The "),e.TgZ(211,"code"),e._uU(212,"ThrottlerGuard"),e.qZA(),e._uU(213," can also be used to work with GraphQL requests. Again, the guard can be extended, but this time the "),e.TgZ(214,"code"),e._uU(215,"getRequestResponse"),e.qZA(),e._uU(216," method will be overridden"),e.qZA(),e.TgZ(217,"pre")(218,"code",9),e._uU(219,"\n@Injectable()\nexport class GqlThrottlerGuard extends ThrottlerGuard {\n  getRequestResponse(context: ExecutionContext) {\n    const gqlCtx = GqlExecutionContext.create(context);\n    const ctx = gqlCtx.getContext();\n    return { req: ctx.req, res: ctx.res };\n  }\n}\n"),e.qZA()(),e.TgZ(220,"h4",22)(221,"span"),e._uU(222,"Configuration"),e.qZA()(),e.TgZ(223,"p"),e._uU(224,"The following options are valid for the object passed to the array of the "),e.TgZ(225,"code"),e._uU(226,"ThrottlerModule"),e.qZA(),e._uU(227,"'s options:"),e.qZA(),e.TgZ(228,"table")(229,"tr")(230,"td")(231,"code"),e._uU(232,"name"),e.qZA()(),e.TgZ(233,"td"),e._uU(234,"the name for internal tracking of which throttler set is being used. Defaults to `default` if not passed"),e.qZA()(),e.TgZ(235,"tr")(236,"td")(237,"code"),e._uU(238,"ttl"),e.qZA()(),e.TgZ(239,"td"),e._uU(240,"the number of milliseconds that each request will last in storage"),e.qZA()(),e.TgZ(241,"tr")(242,"td")(243,"code"),e._uU(244,"limit"),e.qZA()(),e.TgZ(245,"td"),e._uU(246,"the maximum number of requests within the TTL limit"),e.qZA()(),e.TgZ(247,"tr")(248,"td")(249,"code"),e._uU(250,"ignoreUserAgents"),e.qZA()(),e.TgZ(251,"td"),e._uU(252,"an array of regular expressions of user-agents to ignore when it comes to throttling requests"),e.qZA()(),e.TgZ(253,"tr")(254,"td")(255,"code"),e._uU(256,"skipIf"),e.qZA()(),e.TgZ(257,"td"),e._uU(258,"a function that takes in the "),e.TgZ(259,"code"),e._uU(260,"ExecutionContext"),e.qZA(),e._uU(261," and returns a "),e.TgZ(262,"code"),e._uU(263,"boolean"),e.qZA(),e._uU(264," to short circuit the throttler logic. Like "),e.TgZ(265,"code"),e._uU(266,"@SkipThrottler()"),e.qZA(),e._uU(267,", but based on the request"),e.qZA()()(),e.TgZ(268,"p"),e._uU(269,"If you need to set up storage instead, or want to use some of the above options in a more global sense, applying to each throttler set, you can pass the options above via the "),e.TgZ(270,"code"),e._uU(271,"throttlers"),e.qZA(),e._uU(272," option key and use the below table"),e.qZA(),e.TgZ(273,"table")(274,"tr")(275,"td")(276,"code"),e._uU(277,"storage"),e.qZA()(),e.TgZ(278,"td"),e._uU(279,"a custom storage service for where the throttling should be kept track. "),e.TgZ(280,"a",23),e._uU(281,"See here."),e.qZA()()(),e.TgZ(282,"tr")(283,"td")(284,"code"),e._uU(285,"ignoreUserAgents"),e.qZA()(),e.TgZ(286,"td"),e._uU(287,"an array of regular expressions of user-agents to ignore when it comes to throttling requests"),e.qZA()(),e.TgZ(288,"tr")(289,"td")(290,"code"),e._uU(291,"skipIf"),e.qZA()(),e.TgZ(292,"td"),e._uU(293,"a function that takes in the "),e.TgZ(294,"code"),e._uU(295,"ExecutionContext"),e.qZA(),e._uU(296," and returns a "),e.TgZ(297,"code"),e._uU(298,"boolean"),e.qZA(),e._uU(299," to short circuit the throttler logic. Like "),e.TgZ(300,"code"),e._uU(301,"@SkipThrottler()"),e.qZA(),e._uU(302,", but based on the request"),e.qZA()(),e.TgZ(303,"tr")(304,"td")(305,"code"),e._uU(306,"throttlers"),e.qZA()(),e.TgZ(307,"td"),e._uU(308,"an array of throttler sets, defined using the table above"),e.qZA()()(),e.TgZ(309,"h4",24)(310,"span"),e._uU(311,"Async Configuration"),e.qZA()(),e.TgZ(312,"p"),e._uU(313,"You may want to get your rate-limiting configuration asynchronously instead of synchronously. You can use the "),e.TgZ(314,"code"),e._uU(315,"forRootAsync()"),e.qZA(),e._uU(316," method, which allows for dependency injection and "),e.TgZ(317,"code"),e._uU(318,"async"),e.qZA(),e._uU(319," methods."),e.qZA(),e.TgZ(320,"p"),e._uU(321,"One approach would be to use a factory function:"),e.qZA(),e.TgZ(322,"pre")(323,"code",9),e._uU(324,"\n@Module({\n  imports: [\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => [\n        {\n          ttl: config.get('THROTTLE_TTL'),\n          limit: config.get('THROTTLE_LIMIT'),\n        },\n      ],\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(325,"p"),e._uU(326,"You can also use the "),e.TgZ(327,"code"),e._uU(328,"useClass"),e.qZA(),e._uU(329," syntax:"),e.qZA(),e.TgZ(330,"pre")(331,"code",9),e._uU(332,"\n@Module({\n  imports: [\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      useClass: ThrottlerConfigService,\n    }),\n  ],\n})\nexport class AppModule {}\n"),e.qZA()(),e.TgZ(333,"p"),e._uU(334,"This is doable, as long as "),e.TgZ(335,"code"),e._uU(336,"ThrottlerConfigService"),e.qZA(),e._uU(337," implements the interface "),e.TgZ(338,"code"),e._uU(339,"ThrottlerOptionsFactory"),e.qZA(),e._uU(340,"."),e.qZA(),e.TgZ(341,"h4",25)(342,"span"),e._uU(343,"Storages"),e.qZA()(),e.TgZ(344,"p"),e._uU(345,"The built in storage is an in memory cache that keeps track of the requests made until they have passed the TTL set by the global options. You can drop in your own storage option to the "),e.TgZ(346,"code"),e._uU(347,"storage"),e.qZA(),e._uU(348," option of the "),e.TgZ(349,"code"),e._uU(350,"ThrottlerModule"),e.qZA(),e._uU(351," so long as the class implements the "),e.TgZ(352,"code"),e._uU(353,"ThrottlerStorage"),e.qZA(),e._uU(354," interface."),e.qZA(),e.TgZ(355,"p"),e._uU(356,"For distributed servers you could use the community storage provider for "),e.TgZ(357,"a",26),e._uU(358,"Redis"),e.qZA(),e._uU(359," to have a single source of truth."),e.qZA(),e.TgZ(360,"blockquote",17)(361,"strong"),e._uU(362,"Note"),e.qZA(),e.TgZ(363,"code"),e._uU(364,"ThrottlerStorage"),e.qZA(),e._uU(365," can be imported from "),e.TgZ(366,"code"),e._uU(367,"@nestjs/throttler"),e.qZA(),e._uU(368,".\n"),e.qZA(),e.TgZ(369,"h4",27)(370,"span"),e._uU(371,"Time Helpers"),e.qZA()(),e.TgZ(372,"p"),e._uU(373,"There are a couple of helper methods to make the timings more readable if you prefer to use them over the direct definition. "),e.TgZ(374,"code"),e._uU(375,"@nestjs/throttler"),e.qZA(),e._uU(376," exports five different helpers, "),e.TgZ(377,"code"),e._uU(378,"seconds"),e.qZA(),e._uU(379,", "),e.TgZ(380,"code"),e._uU(381,"minutes"),e.qZA(),e._uU(382,", "),e.TgZ(383,"code"),e._uU(384,"hours"),e.qZA(),e._uU(385,", "),e.TgZ(386,"code"),e._uU(387,"days"),e.qZA(),e._uU(388,", and "),e.TgZ(389,"code"),e._uU(390,"weeks"),e.qZA(),e._uU(391,". To use them, simply call "),e.TgZ(392,"code"),e._uU(393,"seconds(5)"),e.qZA(),e._uU(394," or any of the other helpers, and the correct number of milliseconds will be returned."),e.qZA(),e.TgZ(395,"h4",28)(396,"span"),e._uU(397,"Migration Guide"),e.qZA()(),e.TgZ(398,"p"),e._uU(399,"For most people, wrapping your options in an array will be enough."),e.qZA(),e.TgZ(400,"p"),e._uU(401,"If you are using a custom storage, you should wrap your "),e.TgZ(402,"code"),e._uU(403,"ttl"),e.qZA(),e._uU(404," and "),e.TgZ(405,"code"),e._uU(406,"limit"),e.qZA(),e._uU(407," in an\narray and assign it to the "),e.TgZ(408,"code"),e._uU(409,"throttlers"),e.qZA(),e._uU(410," property of the options object."),e.qZA(),e.TgZ(411,"p"),e._uU(412,"Any "),e.TgZ(413,"code"),e._uU(414,"@ThrottleSkip()"),e.qZA(),e._uU(415," should now take in an object with "),e.TgZ(416,"code"),e._uU(417,"string: boolean"),e.qZA(),e._uU(418," props.\nThe strings are the names of the throttlers. If you do not have a name, pass the\nstring "),e.TgZ(419,"code"),e._uU(420,"'default'"),e.qZA(),e._uU(421,", as this is what will be used under the hood otherwise."),e.qZA(),e.TgZ(422,"p"),e._uU(423,"Any "),e.TgZ(424,"code"),e._uU(425,"@Throttle()"),e.qZA(),e._uU(426," decorators should also now take in an object with string keys,\nrelating to the names of the throttler contexts (again, "),e.TgZ(427,"code"),e._uU(428,"'default'"),e.qZA(),e._uU(429," if no name)\nand values of objects that have "),e.TgZ(430,"code"),e._uU(431,"limit"),e.qZA(),e._uU(432," and "),e.TgZ(433,"code"),e._uU(434,"ttl"),e.qZA(),e._uU(435," keys."),e.qZA(),e.TgZ(436,"blockquote",29)(437,"strong"),e._uU(438,"Important"),e.qZA(),e._uU(439," The "),e.TgZ(440,"code"),e._uU(441,"ttl"),e.qZA(),e._uU(442," is now in "),e.TgZ(443,"strong"),e._uU(444,"milliseconds"),e.qZA(),e._uU(445,". If you want to keep your ttl\nin seconds for readability, use the "),e.TgZ(446,"code"),e._uU(447,"seconds"),e.qZA(),e._uU(448," helper from this package. It just\nmultiplies the ttl by 1000 to make it in milliseconds.\n"),e.qZA(),e.TgZ(449,"p"),e._uU(450,"For more info, see the "),e.TgZ(451,"a",30),e._uU(452,"Changelog"),e.qZA()()()),2&o){const c=e.MAs(33),a=e.MAs(71);e.xp6(30),e.hij(" ",e.xi3(31,4,"app.module",c.isJsActive),"\n"),e.xp6(38),e.hij(" ",e.xi3(69,7,"app.module",a.isJsActive),"\n"),e.xp6(22),e.AsE("","{"," default: true ","}","")}},dependencies:[g.n,u.U,Z.F],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Rate Limiting"}},{path:"authorization",component:(()=>{class t extends i.y{static \u0275fac=function(){let n;return function(s){return(n||(n=e.n5z(t)))(s||t)}}();static \u0275cmp=e.Xpm({type:t,selectors:[["app-authorization"]],features:[e.qOj],decls:581,vars:36,consts:[[1,"content"],["contentReference",""],[1,"github-links"],["href","https://github.com/nestjs/docs.nestjs.com/edit/master/content/security/authorization.md","aria-label","Suggest Edits","title","Suggest Edits"],[1,"fas","fa-edit"],["id","authorization"],["appAnchor","","id","basic-rbac-implementation"],["routerLink","/guards"],[1,"filename"],["app03b8f6682117ca2448166ab81abb316976325b45",""],[1,"language-typescript"],[1,"info"],["app114bc075c29adc9e794d31d11ec1a3431711a432",""],["app005fcc729ba6c974095bc45e28be61555934b509",""],["app49c21602780a56bde294c200638a8caf550b2e7d",""],["href","/fundamentals/execution-context#reflection-and-metadata"],[1,"warning"],["routerLink","/security/authentication"],["appAnchor","","id","claims-based-authorization"],["href","/security/authorization#basic-rbac-implementation"],["app738570e448bd9e07d6de3389b51e8d12219e0ab9",""],["appAnchor","","id","integrating-casl"],["rel","nofollow","target","_blank","href","https://casl.js.org/"],[1,"language-bash"],["rel","nofollow","target","_blank","href","https://casl.js.org/v6/en/guide/subject-type-detection#use-classes-as-subject-types"],["rel","nofollow","target","_blank","href","https://casl.js.org/v6/en/guide/intro"],["appAnchor","","id","advanced-implementing-a-policiesguard"],["routerLink","/fundamentals/module-ref"]],template:function(o,s){if(1&o&&(e.TgZ(0,"div",0,1)(2,"div",2)(3,"a",3),e._UZ(4,"i",4),e.qZA()(),e.TgZ(5,"h3",5),e._uU(6,"Authorization"),e.qZA(),e.TgZ(7,"p")(8,"strong"),e._uU(9,"Authorization"),e.qZA(),e._uU(10," refers to the process that determines what a user is able to do. For example, an administrative user is allowed to create, edit, and delete posts. A non-administrative user is only authorized to read the posts."),e.qZA(),e.TgZ(11,"p"),e._uU(12,"Authorization is orthogonal and independent from authentication. However, authorization requires an authentication mechanism."),e.qZA(),e.TgZ(13,"p"),e._uU(14,"There are many different approaches and strategies to handle authorization. The approach taken for any project depends on its particular application requirements. This chapter presents a few approaches to authorization that can be adapted to a variety of different requirements."),e.qZA(),e.TgZ(15,"h4",6)(16,"span"),e._uU(17,"Basic RBAC implementation"),e.qZA()(),e.TgZ(18,"p"),e._uU(19,"Role-based access control ("),e.TgZ(20,"strong"),e._uU(21,"RBAC"),e.qZA(),e._uU(22,") is a policy-neutral access-control mechanism defined around roles and privileges. In this section, we'll demonstrate how to implement a very basic RBAC mechanism using Nest "),e.TgZ(23,"a",7),e._uU(24,"guards"),e.qZA(),e._uU(25,"."),e.qZA(),e.TgZ(26,"p"),e._uU(27,"First, let's create a "),e.TgZ(28,"code"),e._uU(29,"Role"),e.qZA(),e._uU(30," enum representing roles in the system:"),e.qZA(),e.TgZ(31,"span",8),e._uU(32),e.ALo(33,"extension"),e._UZ(34,"app-tabs",null,9),e.qZA(),e.TgZ(36,"pre")(37,"code",10),e._uU(38,"\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n"),e.qZA()(),e.TgZ(39,"blockquote",11)(40,"strong"),e._uU(41,"Hint"),e.qZA(),e._uU(42," In more sophisticated systems, you may store roles within a database, or pull them from the external authentication provider.\n"),e.qZA(),e.TgZ(43,"p"),e._uU(44,"With this in place, we can create a "),e.TgZ(45,"code"),e._uU(46,"@Roles()"),e.qZA(),e._uU(47," decorator. This decorator allows specifying what roles are required to access specific resources."),e.qZA(),e.TgZ(48,"span",8),e._uU(49),e.ALo(50,"extension"),e._UZ(51,"app-tabs",null,12),e.qZA(),e.TgZ(53,"pre")(54,"code",10),e._uU(55,"\nimport { SetMetadata } from '@nestjs/common';\nimport { Role } from '../enums/role.enum';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);\n"),e.qZA()(),e.TgZ(56,"pre")(57,"code",10),e._uU(58,"\nimport { SetMetadata } from '@nestjs/common';\n\nexport const ROLES_KEY = 'roles';\nexport const Roles = (...roles) => SetMetadata(ROLES_KEY, roles);\n"),e.qZA()(),e.TgZ(59,"p"),e._uU(60,"Now that we have a custom "),e.TgZ(61,"code"),e._uU(62,"@Roles()"),e.qZA(),e._uU(63," decorator, we can use it to decorate any route handler."),e.qZA(),e.TgZ(64,"span",8),e._uU(65),e.ALo(66,"extension"),e._UZ(67,"app-tabs",null,13),e.qZA(),e.TgZ(69,"pre")(70,"code",10),e._uU(71,"\n@Post()\n@Roles(Role.Admin)\ncreate(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(72,"pre")(73,"code",10),e._uU(74,"\n@Post()\n@Roles(Role.Admin)\n@Bind(Body())\ncreate(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(75,"p"),e._uU(76,"Finally, we create a "),e.TgZ(77,"code"),e._uU(78,"RolesGuard"),e.qZA(),e._uU(79," class which will compare the roles assigned to the current user to the actual roles required by the current route being processed. In order to access the route's role(s) (custom metadata), we'll use the "),e.TgZ(80,"code"),e._uU(81,"Reflector"),e.qZA(),e._uU(82," helper class, which is provided out of the box by the framework and exposed from the "),e.TgZ(83,"code"),e._uU(84,"@nestjs/core"),e.qZA(),e._uU(85," package."),e.qZA(),e.TgZ(86,"span",8),e._uU(87),e.ALo(88,"extension"),e._UZ(89,"app-tabs",null,14),e.qZA(),e.TgZ(91,"pre")(92,"code",10),e._uU(93,"\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n"),e.qZA()(),e.TgZ(94,"pre")(95,"code",10),e._uU(96,"\nimport { Injectable, Dependencies } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\n@Dependencies(Reflector)\nexport class RolesGuard {\n  constructor(reflector) {\n    this.reflector = reflector;\n  }\n\n  canActivate(context) {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles.includes(role));\n  }\n}\n"),e.qZA()(),e.TgZ(97,"blockquote",11)(98,"strong"),e._uU(99,"Hint"),e.qZA(),e._uU(100," Refer to the "),e.TgZ(101,"a",15),e._uU(102,"Reflection and metadata"),e.qZA(),e._uU(103," section of the Execution context chapter for more details on utilizing "),e.TgZ(104,"code"),e._uU(105,"Reflector"),e.qZA(),e._uU(106," in a context-sensitive way.\n"),e.qZA(),e.TgZ(107,"blockquote",16)(108,"strong"),e._uU(109,"Notice"),e.qZA(),e._uU(110,' This example is named "'),e.TgZ(111,"strong"),e._uU(112,"basic"),e.qZA(),e._uU(113,"\" as we only check for the presence of roles on the route handler level. In real-world applications, you may have endpoints/handlers that involve several operations, in which each of them requires a specific set of permissions. In this case, you'll have to provide a mechanism to check roles somewhere within your business-logic, making it somewhat harder to maintain as there will be no centralized place that associates permissions with specific actions.\n"),e.qZA(),e.TgZ(114,"p"),e._uU(115,"In this example, we assumed that "),e.TgZ(116,"code"),e._uU(117,"request.user"),e.qZA(),e._uU(118," contains the user instance and allowed roles (under the "),e.TgZ(119,"code"),e._uU(120,"roles"),e.qZA(),e._uU(121," property). In your app, you will probably make that association in your custom "),e.TgZ(122,"strong"),e._uU(123,"authentication guard"),e.qZA(),e._uU(124," - see "),e.TgZ(125,"a",17),e._uU(126,"authentication"),e.qZA(),e._uU(127," chapter for more details."),e.qZA(),e.TgZ(128,"p"),e._uU(129,"To make sure this example works, your "),e.TgZ(130,"code"),e._uU(131,"User"),e.qZA(),e._uU(132," class must look as follows:"),e.qZA(),e.TgZ(133,"pre")(134,"code",10),e._uU(135,"\nclass User {\n  // ...other properties\n  roles: Role[];\n}\n"),e.qZA()(),e.TgZ(136,"p"),e._uU(137,"Lastly, make sure to register the "),e.TgZ(138,"code"),e._uU(139,"RolesGuard"),e.qZA(),e._uU(140,", for example, at the controller level, or globally:"),e.qZA(),e.TgZ(141,"pre")(142,"code",10),e._uU(143,"\nproviders: [\n  {\n    provide: APP_GUARD,\n    useClass: RolesGuard,\n  },\n],\n"),e.qZA()(),e.TgZ(144,"p"),e._uU(145,"When a user with insufficient privileges requests an endpoint, Nest automatically returns the following response:"),e.qZA(),e.TgZ(146,"pre")(147,"code",10),e._uU(148,'\n{\n  "statusCode": 403,\n  "message": "Forbidden resource",\n  "error": "Forbidden"\n}\n'),e.qZA()(),e.TgZ(149,"blockquote",11)(150,"strong"),e._uU(151,"Hint"),e.qZA(),e._uU(152," If you want to return a different error response, you should throw your own specific exception instead of returning a boolean value.\n"),e.qZA(),e.TgZ(153,"p"),e._UZ(154,"app-banner-courses-auth"),e.qZA(),e.TgZ(155,"h4",18)(156,"span"),e._uU(157,"Claims-based authorization"),e.qZA()(),e.TgZ(158,"p"),e._uU(159,"When an identity is created it may be assigned one or more claims issued by a trusted party. A claim is a name-value pair that represents what the subject can do, not what the subject is."),e.qZA(),e.TgZ(160,"p"),e._uU(161,"To implement a Claims-based authorization in Nest, you can follow the same steps we have shown above in the "),e.TgZ(162,"a",19),e._uU(163,"RBAC"),e.qZA(),e._uU(164," section with one significant difference: instead of checking for specific roles, you should compare "),e.TgZ(165,"strong"),e._uU(166,"permissions"),e.qZA(),e._uU(167,". Every user would have a set of permissions assigned. Likewise, each resource/endpoint would define what permissions are required (for example, through a dedicated "),e.TgZ(168,"code"),e._uU(169,"@RequirePermissions()"),e.qZA(),e._uU(170," decorator) to access them."),e.qZA(),e.TgZ(171,"span",8),e._uU(172),e.ALo(173,"extension"),e._UZ(174,"app-tabs",null,20),e.qZA(),e.TgZ(176,"pre")(177,"code",10),e._uU(178,"\n@Post()\n@RequirePermissions(Permission.CREATE_CAT)\ncreate(@Body() createCatDto: CreateCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(179,"pre")(180,"code",10),e._uU(181,"\n@Post()\n@RequirePermissions(Permission.CREATE_CAT)\n@Bind(Body())\ncreate(createCatDto) {\n  this.catsService.create(createCatDto);\n}\n"),e.qZA()(),e.TgZ(182,"blockquote",11)(183,"strong"),e._uU(184,"Hint"),e.qZA(),e._uU(185," In the example above, "),e.TgZ(186,"code"),e._uU(187,"Permission"),e.qZA(),e._uU(188," (similar to "),e.TgZ(189,"code"),e._uU(190,"Role"),e.qZA(),e._uU(191," we have shown in RBAC section) is a TypeScript enum that contains all the permissions available in your system.\n"),e.qZA(),e.TgZ(192,"h4",21)(193,"span"),e._uU(194,"Integrating CASL"),e.qZA()(),e.TgZ(195,"p")(196,"a",22),e._uU(197,"CASL"),e.qZA(),e._uU(198," is an isomorphic authorization library which restricts what resources a given client is allowed to access. It's designed to be incrementally adoptable and can easily scale between a simple claim based and fully featured subject and attribute based authorization."),e.qZA(),e.TgZ(199,"p"),e._uU(200,"To start, first install the "),e.TgZ(201,"code"),e._uU(202,"@casl/ability"),e.qZA(),e._uU(203," package:"),e.qZA(),e.TgZ(204,"pre")(205,"code",23),e._uU(206,"\n$ npm i @casl/ability\n"),e.qZA()(),e.TgZ(207,"blockquote",11)(208,"strong"),e._uU(209,"Hint"),e.qZA(),e._uU(210," In this example, we chose CASL, but you can use any other library like "),e.TgZ(211,"code"),e._uU(212,"accesscontrol"),e.qZA(),e._uU(213," or "),e.TgZ(214,"code"),e._uU(215,"acl"),e.qZA(),e._uU(216,", depending on your preferences and project needs.\n"),e.qZA(),e.TgZ(217,"p"),e._uU(218,"Once the installation is complete, for the sake of illustrating the mechanics of CASL, we'll define two entity classes: "),e.TgZ(219,"code"),e._uU(220,"User"),e.qZA(),e._uU(221," and "),e.TgZ(222,"code"),e._uU(223,"Article"),e.qZA(),e._uU(224,"."),e.qZA(),e.TgZ(225,"pre")(226,"code",10),e._uU(227,"\nclass User {\n  id: number;\n  isAdmin: boolean;\n}\n"),e.qZA()(),e.TgZ(228,"p")(229,"code"),e._uU(230,"User"),e.qZA(),e._uU(231," class consists of two properties, "),e.TgZ(232,"code"),e._uU(233,"id"),e.qZA(),e._uU(234,", which is a unique user identifier, and "),e.TgZ(235,"code"),e._uU(236,"isAdmin"),e.qZA(),e._uU(237,", indicating whether a user has administrator privileges."),e.qZA(),e.TgZ(238,"pre")(239,"code",10),e._uU(240,"\nclass Article {\n  id: number;\n  isPublished: boolean;\n  authorId: number;\n}\n"),e.qZA()(),e.TgZ(241,"p")(242,"code"),e._uU(243,"Article"),e.qZA(),e._uU(244," class has three properties, respectively "),e.TgZ(245,"code"),e._uU(246,"id"),e.qZA(),e._uU(247,", "),e.TgZ(248,"code"),e._uU(249,"isPublished"),e.qZA(),e._uU(250,", and "),e.TgZ(251,"code"),e._uU(252,"authorId"),e.qZA(),e._uU(253,". "),e.TgZ(254,"code"),e._uU(255,"id"),e.qZA(),e._uU(256," is a unique article identifier, "),e.TgZ(257,"code"),e._uU(258,"isPublished"),e.qZA(),e._uU(259," indicates whether an article was already published or not, and "),e.TgZ(260,"code"),e._uU(261,"authorId"),e.qZA(),e._uU(262,", which is an ID of a user who wrote the article."),e.qZA(),e.TgZ(263,"p"),e._uU(264,"Now let's review and refine our requirements for this example:"),e.qZA(),e.TgZ(265,"ul")(266,"li"),e._uU(267,"Admins can manage (create/read/update/delete) all entities"),e.qZA(),e.TgZ(268,"li"),e._uU(269,"Users have read-only access to everything"),e.qZA(),e.TgZ(270,"li"),e._uU(271,"Users can update their articles ("),e.TgZ(272,"code"),e._uU(273,"article.authorId === userId"),e.qZA(),e._uU(274,")"),e.qZA(),e.TgZ(275,"li"),e._uU(276,"Articles that are published already cannot be removed ("),e.TgZ(277,"code"),e._uU(278,"article.isPublished === true"),e.qZA(),e._uU(279,")"),e.qZA()(),e.TgZ(280,"p"),e._uU(281,"With this in mind, we can start off by creating an "),e.TgZ(282,"code"),e._uU(283,"Action"),e.qZA(),e._uU(284," enum representing all possible actions that the users can perform with entities:"),e.qZA(),e.TgZ(285,"pre")(286,"code",10),e._uU(287,"\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n"),e.qZA()(),e.TgZ(288,"blockquote",16)(289,"strong"),e._uU(290,"Notice"),e.qZA(),e.TgZ(291,"code"),e._uU(292,"manage"),e.qZA(),e._uU(293,' is a special keyword in CASL which represents "any" action.\n'),e.qZA(),e.TgZ(294,"p"),e._uU(295,"To encapsulate CASL library, let's generate the "),e.TgZ(296,"code"),e._uU(297,"CaslModule"),e.qZA(),e._uU(298," and "),e.TgZ(299,"code"),e._uU(300,"CaslAbilityFactory"),e.qZA(),e._uU(301," now."),e.qZA(),e.TgZ(302,"pre")(303,"code",23),e._uU(304,"\n$ nest g module casl\n$ nest g class casl/casl-ability.factory\n"),e.qZA()(),e.TgZ(305,"p"),e._uU(306,"With this in place, we can define the "),e.TgZ(307,"code"),e._uU(308,"createForUser()"),e.qZA(),e._uU(309," method on the "),e.TgZ(310,"code"),e._uU(311,"CaslAbilityFactory"),e.qZA(),e._uU(312,". This method will create the "),e.TgZ(313,"code"),e._uU(314,"Ability"),e.qZA(),e._uU(315," object for a given user:"),e.qZA(),e.TgZ(316,"pre")(317,"code",10),e._uU(318,"\ntype Subjects = InferSubjects<typeof Article | typeof User> | 'all';\n\nexport type AppAbility = Ability<[Action, Subjects]>;\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder<\n      Ability<[Action, Subjects]>\n    >(Ability as AbilityClass<AppAbility>);\n\n    if (user.isAdmin) {\n      can(Action.Manage, 'all'); // read-write access to everything\n    } else {\n      can(Action.Read, 'all'); // read-only access to everything\n    }\n\n    can(Action.Update, Article, { authorId: user.id });\n    cannot(Action.Delete, Article, { isPublished: true });\n\n    return build({\n      // Read https://casl.js.org/v6/en/guide/subject-type-detection#use-classes-as-subject-types for details\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType<Subjects>,\n    });\n  }\n}\n"),e.qZA()(),e.TgZ(319,"blockquote",16)(320,"strong"),e._uU(321,"Notice"),e.qZA(),e.TgZ(322,"code"),e._uU(323,"all"),e.qZA(),e._uU(324,' is a special keyword in CASL that represents "any subject".\n'),e.qZA(),e.TgZ(325,"blockquote",11)(326,"strong"),e._uU(327,"Hint"),e.qZA(),e.TgZ(328,"code"),e._uU(329,"Ability"),e.qZA(),e._uU(330,", "),e.TgZ(331,"code"),e._uU(332,"AbilityBuilder"),e.qZA(),e._uU(333,", "),e.TgZ(334,"code"),e._uU(335,"AbilityClass"),e.qZA(),e._uU(336,", and "),e.TgZ(337,"code"),e._uU(338,"ExtractSubjectType"),e.qZA(),e._uU(339," classes are exported from the "),e.TgZ(340,"code"),e._uU(341,"@casl/ability"),e.qZA(),e._uU(342," package.\n"),e.qZA(),e.TgZ(343,"blockquote",11)(344,"strong"),e._uU(345,"Hint"),e.qZA(),e.TgZ(346,"code"),e._uU(347,"detectSubjectType"),e.qZA(),e._uU(348," option let CASL understand how to get subject type out of an object. For more information read "),e.TgZ(349,"a",24),e._uU(350,"CASL documentation"),e.qZA(),e._uU(351," for details.\n"),e.qZA(),e.TgZ(352,"p"),e._uU(353,"In the example above, we created the "),e.TgZ(354,"code"),e._uU(355,"Ability"),e.qZA(),e._uU(356," instance using the "),e.TgZ(357,"code"),e._uU(358,"AbilityBuilder"),e.qZA(),e._uU(359," class. As you probably guessed, "),e.TgZ(360,"code"),e._uU(361,"can"),e.qZA(),e._uU(362," and "),e.TgZ(363,"code"),e._uU(364,"cannot"),e.qZA(),e._uU(365," accept the same arguments but have different meanings, "),e.TgZ(366,"code"),e._uU(367,"can"),e.qZA(),e._uU(368," allows to do an action on the specified subject and "),e.TgZ(369,"code"),e._uU(370,"cannot"),e.qZA(),e._uU(371," forbids. Both may accept up to 4 arguments. To learn more about these functions, visit the official "),e.TgZ(372,"a",25),e._uU(373,"CASL documentation"),e.qZA(),e._uU(374,"."),e.qZA(),e.TgZ(375,"p"),e._uU(376,"Lastly, make sure to add the "),e.TgZ(377,"code"),e._uU(378,"CaslAbilityFactory"),e.qZA(),e._uU(379," to the "),e.TgZ(380,"code"),e._uU(381,"providers"),e.qZA(),e._uU(382," and "),e.TgZ(383,"code"),e._uU(384,"exports"),e.qZA(),e._uU(385," arrays in the "),e.TgZ(386,"code"),e._uU(387,"CaslModule"),e.qZA(),e._uU(388," module definition:"),e.qZA(),e.TgZ(389,"pre")(390,"code",10),e._uU(391,"\nimport { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './casl-ability.factory';\n\n@Module({\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n"),e.qZA()(),e.TgZ(392,"p"),e._uU(393,"With this in place, we can inject the "),e.TgZ(394,"code"),e._uU(395,"CaslAbilityFactory"),e.qZA(),e._uU(396," to any class using standard constructor injection as long as the "),e.TgZ(397,"code"),e._uU(398,"CaslModule"),e.qZA(),e._uU(399," is imported in the host context:"),e.qZA(),e.TgZ(400,"pre")(401,"code",10),e._uU(402,"\nconstructor(private caslAbilityFactory: CaslAbilityFactory) {}\n"),e.qZA()(),e.TgZ(403,"p"),e._uU(404,"Then use it in a class as follows."),e.qZA(),e.TgZ(405,"pre")(406,"code",10),e._uU(407,"\nconst ability = this.caslAbilityFactory.createForUser(user);\nif (ability.can(Action.Read, 'all')) {\n  // \"user\" has read access to everything\n}\n"),e.qZA()(),e.TgZ(408,"blockquote",11)(409,"strong"),e._uU(410,"Hint"),e.qZA(),e._uU(411," Learn more about the "),e.TgZ(412,"code"),e._uU(413,"Ability"),e.qZA(),e._uU(414," class in the official "),e.TgZ(415,"a",25),e._uU(416,"CASL documentation"),e.qZA(),e._uU(417,".\n"),e.qZA(),e.TgZ(418,"p"),e._uU(419,"For example, let's say we have a user who is not an admin. In this case, the user should be able to read articles, but creating new ones or removing the existing articles should be prohibited."),e.qZA(),e.TgZ(420,"pre")(421,"code",10),e._uU(422,"\nconst user = new User();\nuser.isAdmin = false;\n\nconst ability = this.caslAbilityFactory.createForUser(user);\nability.can(Action.Read, Article); // true\nability.can(Action.Delete, Article); // false\nability.can(Action.Create, Article); // false\n"),e.qZA()(),e.TgZ(423,"blockquote",11)(424,"strong"),e._uU(425,"Hint"),e.qZA(),e._uU(426," Although both "),e.TgZ(427,"code"),e._uU(428,"Ability"),e.qZA(),e._uU(429," and "),e.TgZ(430,"code"),e._uU(431,"AbilityBuilder"),e.qZA(),e._uU(432," classes provide "),e.TgZ(433,"code"),e._uU(434,"can"),e.qZA(),e._uU(435," and "),e.TgZ(436,"code"),e._uU(437,"cannot"),e.qZA(),e._uU(438," methods, they have different purposes and accept slightly different arguments.\n"),e.qZA(),e.TgZ(439,"p"),e._uU(440,"Also, as we have specified in our requirements, the user should be able to update its articles:"),e.qZA(),e.TgZ(441,"pre")(442,"code",10),e._uU(443,"\nconst user = new User();\nuser.id = 1;\n\nconst article = new Article();\narticle.authorId = user.id;\n\nconst ability = this.caslAbilityFactory.createForUser(user);\nability.can(Action.Update, article); // true\n\narticle.authorId = 2;\nability.can(Action.Update, article); // false\n"),e.qZA()(),e.TgZ(444,"p"),e._uU(445,"As you can see, "),e.TgZ(446,"code"),e._uU(447,"Ability"),e.qZA(),e._uU(448," instance allows us to check permissions in pretty readable way. Likewise, "),e.TgZ(449,"code"),e._uU(450,"AbilityBuilder"),e.qZA(),e._uU(451," allows us to define permissions (and specify various conditions) in a similar fashion. To find more examples, visit the official documentation."),e.qZA(),e.TgZ(452,"h4",26)(453,"span"),e._uU(454,"Advanced: Implementing a "),e.TgZ(455,"code"),e._uU(456,"PoliciesGuard"),e.qZA()()(),e.TgZ(457,"p"),e._uU(458,"In this section, we'll demonstrate how to build a somewhat more sophisticated guard, which checks if a user meets specific "),e.TgZ(459,"strong"),e._uU(460,"authorization policies"),e.qZA(),e._uU(461," that can be configured on the method-level (you can extend it to respect policies configured on the class-level too). In this example, we are going to use the CASL package just for illustration purposes, but using this library is not required. Also, we will use the "),e.TgZ(462,"code"),e._uU(463,"CaslAbilityFactory"),e.qZA(),e._uU(464," provider that we've created in the previous section."),e.qZA(),e.TgZ(465,"p"),e._uU(466,"First, let's flesh out the requirements. The goal is to provide a mechanism that allows specifying policy checks per route handler. We will support both objects and functions (for simpler checks and for those who prefer more functional-style code)."),e.qZA(),e.TgZ(467,"p"),e._uU(468,"Let's start off by defining interfaces for policy handlers:"),e.qZA(),e.TgZ(469,"pre")(470,"code",10),e._uU(471,"\nimport { AppAbility } from '../casl/casl-ability.factory';\n\ninterface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n"),e.qZA()(),e.TgZ(472,"p"),e._uU(473,"As mentioned above, we provided two possible ways of defining a policy handler, an object (instance of a class that implements the "),e.TgZ(474,"code"),e._uU(475,"IPolicyHandler"),e.qZA(),e._uU(476," interface) and a function (which meets the "),e.TgZ(477,"code"),e._uU(478,"PolicyHandlerCallback"),e.qZA(),e._uU(479," type)."),e.qZA(),e.TgZ(480,"p"),e._uU(481,"With this in place, we can create a "),e.TgZ(482,"code"),e._uU(483,"@CheckPolicies()"),e.qZA(),e._uU(484," decorator. This decorator allows specifying what policies have to be met to access specific resources."),e.qZA(),e.TgZ(485,"pre")(486,"code",10),e._uU(487,"\nexport const CHECK_POLICIES_KEY = 'check_policy';\nexport const CheckPolicies = (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers);\n"),e.qZA()(),e.TgZ(488,"p"),e._uU(489,"Now let's create a "),e.TgZ(490,"code"),e._uU(491,"PoliciesGuard"),e.qZA(),e._uU(492," that will extract and execute all the policy handlers bound to a route handler."),e.qZA(),e.TgZ(493,"pre")(494,"code",10),e._uU(495,"\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const policyHandlers =\n      this.reflector.get<PolicyHandler[]>(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.caslAbilityFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n"),e.qZA()(),e.TgZ(496,"blockquote",11)(497,"strong"),e._uU(498,"Hint"),e.qZA(),e._uU(499," In this example, we assumed that "),e.TgZ(500,"code"),e._uU(501,"request.user"),e.qZA(),e._uU(502," contains the user instance. In your app, you will probably make that association in your custom "),e.TgZ(503,"strong"),e._uU(504,"authentication guard"),e.qZA(),e._uU(505," - see "),e.TgZ(506,"a",17),e._uU(507,"authentication"),e.qZA(),e._uU(508," chapter for more details.\n"),e.qZA(),e.TgZ(509,"p"),e._uU(510,"Let's break this example down. The "),e.TgZ(511,"code"),e._uU(512,"policyHandlers"),e.qZA(),e._uU(513," is an array of handlers assigned to the method through the "),e.TgZ(514,"code"),e._uU(515,"@CheckPolicies()"),e.qZA(),e._uU(516," decorator. Next, we use the "),e.TgZ(517,"code"),e._uU(518,"CaslAbilityFactory#create"),e.qZA(),e._uU(519," method which constructs the "),e.TgZ(520,"code"),e._uU(521,"Ability"),e.qZA(),e._uU(522," object, allowing us to verify whether a user has sufficient permissions to perform specific actions. We are passing this object to the policy handler which is either a function or an instance of a class that implements the "),e.TgZ(523,"code"),e._uU(524,"IPolicyHandler"),e.qZA(),e._uU(525,", exposing the "),e.TgZ(526,"code"),e._uU(527,"handle()"),e.qZA(),e._uU(528," method that returns a boolean. Lastly, we use the "),e.TgZ(529,"code"),e._uU(530,"Array#every"),e.qZA(),e._uU(531," method to make sure that every handler returned "),e.TgZ(532,"code"),e._uU(533,"true"),e.qZA(),e._uU(534," value."),e.qZA(),e.TgZ(535,"p"),e._uU(536,"Finally, to test this guard, bind it to any route handler, and register an inline policy handler (functional approach), as follows:"),e.qZA(),e.TgZ(537,"pre")(538,"code",10),e._uU(539,"\n@Get()\n@UseGuards(PoliciesGuard)\n@CheckPolicies((ability: AppAbility) => ability.can(Action.Read, Article))\nfindAll() {\n  return this.articlesService.findAll();\n}\n"),e.qZA()(),e.TgZ(540,"p"),e._uU(541,"Alternatively, we can define a class which implements the "),e.TgZ(542,"code"),e._uU(543,"IPolicyHandler"),e.qZA(),e._uU(544," interface:"),e.qZA(),e.TgZ(545,"pre")(546,"code",10),e._uU(547,"\nexport class ReadArticlePolicyHandler implements IPolicyHandler {\n  handle(ability: AppAbility) {\n    return ability.can(Action.Read, Article);\n  }\n}\n"),e.qZA()(),e.TgZ(548,"p"),e._uU(549,"And use it as follows:"),e.qZA(),e.TgZ(550,"pre")(551,"code",10),e._uU(552,"\n@Get()\n@UseGuards(PoliciesGuard)\n@CheckPolicies(new ReadArticlePolicyHandler())\nfindAll() {\n  return this.articlesService.findAll();\n}\n"),e.qZA()(),e.TgZ(553,"blockquote",16)(554,"strong"),e._uU(555,"Notice"),e.qZA(),e._uU(556," Since we must instantiate the policy handler in-place using the "),e.TgZ(557,"code"),e._uU(558,"new"),e.qZA(),e._uU(559," keyword, "),e.TgZ(560,"code"),e._uU(561,"ReadArticlePolicyHandler"),e.qZA(),e._uU(562," class cannot use the Dependency Injection. This can be addressed with the "),e.TgZ(563,"code"),e._uU(564,"ModuleRef#get"),e.qZA(),e._uU(565," method (read more "),e.TgZ(566,"a",27),e._uU(567,"here"),e.qZA(),e._uU(568,"). Basically, instead of registering functions and instances through the "),e.TgZ(569,"code"),e._uU(570,"@CheckPolicies()"),e.qZA(),e._uU(571," decorator, you must allow passing a "),e.TgZ(572,"code"),e._uU(573,"Type<IPolicyHandler>"),e.qZA(),e._uU(574,". Then, inside your guard, you could retrieve an instance using a type reference: "),e.TgZ(575,"code"),e._uU(576,"moduleRef.get(YOUR_HANDLER_TYPE)"),e.qZA(),e._uU(577," or even dynamically instantiate it using the "),e.TgZ(578,"code"),e._uU(579,"ModuleRef#create"),e.qZA(),e._uU(580," method.\n"),e.qZA()()),2&o){const c=e.MAs(35),a=e.MAs(52),l=e.MAs(68),d=e.MAs(90),p=e.MAs(175);e.xp6(32),e.hij(" ",e.xi3(33,21,"role.enum",c.isJsActive),"\n"),e.xp6(17),e.hij(" ",e.xi3(50,24,"roles.decorator",a.isJsActive),"\n"),e.xp6(4),e.ekj("hide",a.isJsActive),e.xp6(3),e.ekj("hide",!a.isJsActive),e.xp6(9),e.hij(" ",e.xi3(66,27,"cats.controller",l.isJsActive),"\n"),e.xp6(4),e.ekj("hide",l.isJsActive),e.xp6(3),e.ekj("hide",!l.isJsActive),e.xp6(15),e.hij(" ",e.xi3(88,30,"roles.guard",d.isJsActive),"\n"),e.xp6(4),e.ekj("hide",d.isJsActive),e.xp6(3),e.ekj("hide",!d.isJsActive),e.xp6(78),e.hij(" ",e.xi3(173,33,"cats.controller",p.isJsActive),"\n"),e.xp6(4),e.ekj("hide",p.isJsActive),e.xp6(3),e.ekj("hide",!p.isJsActive)}},dependencies:[g.n,u.U,f.N,h.rH,Z.F],encapsulation:2,changeDetection:0})}return t})(),data:{title:"Authorization"}}];let b=(()=>{class t{static \u0275fac=function(o){return new(o||t)};static \u0275mod=e.oAB({type:t});static \u0275inj=e.cJS({imports:[T.ez,q.m,h.Bz.forChild(y)]})}return t})()}}]);