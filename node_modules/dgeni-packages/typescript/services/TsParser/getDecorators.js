"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDecorators = void 0;
const typescript_1 = require("typescript");
const LineFeedPrinter_1 = require("./LineFeedPrinter");
const nodeToString_1 = require("./nodeToString");
function getDecorators(declaration) {
    var _a;
    const decorators = declaration.decorators ||
        (
        // As of TypeScript 4.8 the decorators are part of the `modifiers` array.
        (_a = declaration.modifiers) === null || _a === void 0 ? void 0 : _a.filter(typescript_1.isDecorator));
    if (decorators === null || decorators === void 0 ? void 0 : decorators.length) {
        return decorators.map(decorator => {
            const callExpression = getCallExpression(decorator);
            if (callExpression) {
                return {
                    argumentInfo: callExpression.arguments.map(argument => parseArgument(argument)),
                    arguments: callExpression.arguments.map(argument => LineFeedPrinter_1.lineFeedPrinter.printNode(typescript_1.EmitHint.Expression, argument, declaration.getSourceFile())),
                    expression: decorator,
                    isCallExpression: true,
                    name: (0, nodeToString_1.nodeToString)(callExpression.expression),
                };
            }
            else {
                return {
                    expression: decorator,
                    isCallExpression: false,
                    name: (0, nodeToString_1.nodeToString)(decorator.expression),
                };
            }
        });
    }
}
exports.getDecorators = getDecorators;
function getCallExpression(decorator) {
    if (decorator.expression.kind === typescript_1.SyntaxKind.CallExpression) {
        return decorator.expression;
    }
}
function parseProperties(properties) {
    const result = {};
    properties.forEach(property => {
        if (property.kind === typescript_1.SyntaxKind.PropertyAssignment) {
            result[(0, nodeToString_1.nodeToString)(property.name)] = parseArgument(property.initializer);
        }
    });
    return result;
}
function parseArgument(argument) {
    if (argument.kind === typescript_1.SyntaxKind.ObjectLiteralExpression) {
        return parseProperties(argument.properties);
    }
    if (argument.kind === typescript_1.SyntaxKind.ArrayLiteralExpression) {
        return argument.elements.map(element => (0, nodeToString_1.nodeToString)(element));
    }
    return (0, nodeToString_1.nodeToString)(argument);
}
//# sourceMappingURL=getDecorators.js.map