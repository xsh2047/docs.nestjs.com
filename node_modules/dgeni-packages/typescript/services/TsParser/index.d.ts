import { CompilerOptions, Program, Symbol, TypeChecker } from 'typescript';
import { CustomCompilerHost } from './CustomCompilerHost';
export { getExportDocType } from './getExportDocType';
export { getContent } from './getContent';
export { getAccessibility } from './getAccessibility';
export interface ModuleSymbols extends Array<ModuleSymbol> {
    typeChecker?: TypeChecker;
}
export interface ModuleSymbol extends Symbol {
    exportArray: AugmentedSymbol[];
}
export interface AugmentedSymbol extends Symbol {
    resolvedSymbol: Symbol;
}
export declare class TsParser {
    private log;
    extensions: string[];
    options: CompilerOptions;
    constructor(log: any);
    parse(fileNames: string[], baseDir: string): {
        host: CustomCompilerHost;
        moduleSymbols: ModuleSymbols;
        program: Program;
        typeChecker: TypeChecker;
    };
}
